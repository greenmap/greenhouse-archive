<?php
// $Id: pageroute_ui.module,v 1.18 2006/10/29 18:32:03 fago Exp $

/**
 * @file
 * Adminstration pages for pageroute
 */


/**
 * Implementation of hook_help().
 */
function pageroute_ui_help($section) {

  switch ($section) {
    case 'admin/modules#description':
      return t('Adminstration pages for pageroute.');
    case 'admin/pageroute/route/'. arg(3). '/'. arg(4). '/edit':
      return '<p>'. t('The first additional argument to this page is the uid, as usual.').
             t('The second argument has to be the node id, of the node, that should be edited.').' '.
             t('So you can link to your pageroute e.g. by using the path "%path" to go through the route as the currently logged in user and to edit the node with id 4 on this page.',
             array('%path' => 'pageroutepath/0/4')) . '</p>';
    case 'admin/help#pageroute_ui':
      return _pageroute_ui_get_help();
    case 'admin/pageroute/route/'.arg(3).'/add':
      if (module_exist('help')) {
        return t('Have a look at the pageroute %link for some explanation of the pageroute page types.', array('%link' => l(t('documentation'), 'admin/help/pageroute_ui')));
      }
      else {
        return t('Activate the help module, if you could need some explanation of the pageroute page types.');
      }

  }
}



/**
 * Implementation of hook_menu().
 */
function pageroute_ui_menu($may_cache) {
  
  if ($may_cache) {
    $access = user_access('administer pageroutes');
    
    $items[] = array('path' => 'admin/pageroute', 'title' => t('pageroute'),
        'callback' => 'pageroute_ui_admin',
        'access' => $access);
    $items[] = array('path' => 'admin/pageroute/list',
      'title' => t('list routes'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10);
    $items[] = array('path' => 'admin/pageroute/add',
      'title' => t('add route'),
      'callback' => 'pageroute_ui_route_edit',
      'access' => $access,
      'type' => MENU_LOCAL_TASK); 
    $items[] = array('path' => 'admin/pageroute/edit',
      'callback' => 'pageroute_ui_route_edit',
      'access' => $access,
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/pageroute/del',
      'callback' => 'pageroute_ui_route_del',
      'access' => $access,
      'type' => MENU_CALLBACK);
  }
  else if (is_numeric(arg(3))) {
    $items[] = array('path' => 'admin/pageroute/route/' . arg(3),
      'callback' => 'pageroute_ui_page_edit',
      'type' => MENU_CALLBACK,
      'access' => $access);    
    $items[] = array('path' => 'admin/pageroute/route/' . arg(3) . '/list',
      'title' => t('list pages'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10);
    $items[] = array('path' => 'admin/pageroute/route/' . arg(3) . '/add',
      'title' => t('add page'),
      'callback' => 'pageroute_ui_page_edit',
      'access' => $access,
      'type' => MENU_LOCAL_TASK);     
    $items[] = array('path' => 'admin/pageroute/route/' . arg(3) . '/edit',
      'callback' => 'pageroute_ui_page_edit',
      'access' => $access,
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/pageroute/route/' . arg(3) . '/del',
      'callback' => 'pageroute_ui_page_del',
      'access' => $access,
      'type' => MENU_CALLBACK);
  }
  return $items;  
}

/**
 * Implementation of hook_perm().
 */
function pageroute_ui_perm() {
  return array('administer pageroutes');
}


function pageroute_ui_admin() {
  
  $result = db_query("SELECT * FROM {pageroute_routes} ORDER BY path");
  
  $header = array(t('path'), array('data' => t('Operations'), 'colspan' => '3'));
  
  while ($route = db_fetch_object($result)) {
    $row = array();   
    $row[] = check_plain($route->path);
    $row[] = l(t('edit route'), "admin/pageroute/edit/$route->prid");
    $row[] = l(t('edit pages'), "admin/pageroute/route/$route->prid/list");
    $row[] = l(t('add page'), "admin/pageroute/route/$route->prid/add");    
    $rows[] = $row;
  }
  
  if (empty($rows)) {
    $rows[] = array(array('data' => t('No routes available.'), 'colspan' => '4', 'class' => 'message'));
  }

  return theme('table', $header, $rows, array('id' => 'pageroute'));
}


function pageroute_ui_route_edit() {
  if (arg(2) != 'add' && is_numeric(arg(3))) {
    $route = db_fetch_object(db_query("SELECT * FROM {pageroute_routes} WHERE prid = %d", arg(3)));
    $route->options = unserialize($route->options);
    drupal_set_title(t('edit route'));
  }

  $form['path'] = array('#type' => 'textfield', 
                        '#title' => t('path'), 
                        '#maxlength' => 127,
                        '#default_value' => $route ? $route->path : '',
                        '#required' => TRUE,
                        '#weight' => -5,
                  );
  $form['path']['validated'] = array('#type' => 'value', '#value' => '');


  $form['options']['no_messages'] = array('#type' => 'checkbox', 
                                   '#title' => t('Don\'t show drupal messages during this route.'),
                                   '#default_value' => $route->options['no_messages'],
                              );
  $form['options']['destination'] = array('#type' => 'checkbox', 
                                   '#title' => t('Preserve destination parameter during this route.'),
                                   '#default_value' => $route->options['destination'],
                              );
  $form['options']['tabs'] = array('#type' => 'checkbox',
                                   '#title' => t('Show tab-like submit buttons above the page content.'),
                                   '#default_value' => $route->options['tabs'],
                              );
  $form['options']['last_button'] = array('#type' => 'checkbox', 
                                   '#title' => t('Show the forward button on the last page, if there is a destination parameter.'),
                                   '#default_value' => $route->options['last_button'],
                              );
  $form['options']['#tree'] = TRUE;
  
  $form['options']['access'] = array(
    '#type' => 'fieldset',
    '#title' => t('access control'),
    '#description' => t('Restricts access to the whole pageroute.') .'<br />'.
                      t('Warning: This is only about this route, so it doesn\'t affect the usual node creation, edit and view pages.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['options']['access']['allowed_roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Permit access to only this roles'),
    '#options' => user_roles(),
    '#default_value' => isset($route->options['access']['allowed_roles']) ? $route->options['access']['allowed_roles'] : array(2),
  );
  $form['options']['access']['#weight'] = 5;


  $form['submit'] = array('#type' => 'submit',
                          '#value' => t('Submit'),
                          '#weight' => 9,
                    );
  if ($route) {
    $form['delete'] = array('#type' => 'submit',
                          '#value' => t('Delete'),
                          '#weight' => 10,
                      );
  }
  else {
    $route = (object) array('new' => TRUE);
  }

  $form['route'] = array('#type' => 'value', '#value' => &$route);
  
  $form['#validate'] = array('pageroute_ui_route_edit_validate' => array());
  $form['#submit'] = array('pageroute_ui_route_edit_submit' => array());
                    
  return drupal_get_form('pageroute_ui_route_edit', $form);
}

function pageroute_ui_route_edit_validate($form_id, &$form_values, &$form) {
  
  $path = rtrim(ltrim($form_values['path'], '/'), '/');
  form_set_value($form['path']['validated'], $path);
  
  if (!valid_url($path)) {
    form_set_error('path', t('The path has to be a valid URL.'));
  }
  if ($form_values['route']->path != $path && menu_get_item(NULL, $path)) {
    form_set_error('path', t('This drupal path is already in use. Choose another path.'));
  }
}

function pageroute_ui_route_edit_submit($form_id, &$form_values) {
  $form_values['options']['arg_offset'] = substr_count($form_values['validated'], '/') + 1;
  
  if (!$form_values['route']->new) {
    if ($_POST['op'] == t('Delete')) {
      return 'admin/pageroute/del/' . $form_values['route']->prid;
    }
    db_query("UPDATE {pageroute_routes} SET path = '%s', options = '%s' WHERE prid = %d", 
             $form_values['validated'], serialize($form_values['options']), $form_values['route']->prid);
  }
  else {
    $form_values['route']->prid = db_next_id('{pageroute}_rid');
    db_query("INSERT INTO {pageroute_routes} (prid, path, options) VALUES(%d, '%s', '%s')", 
             $form_values['route']->prid, $form_values['validated'], serialize($form_values['options']));
  }
  cache_clear_all("menu:", TRUE);
  return 'admin/pageroute';
}

function pageroute_ui_route_del() {

  if (is_numeric(arg(3))) {
    $route = db_fetch_object(db_query("SELECT * FROM {pageroute_routes} WHERE prid = %d", arg(3)));
    $route->options = unserialize($route->options);
  }
  if (!$route) {
    drupal_not_found();
    exit;
  }

  $form['route'] = array('#type' => 'value', '#value' => $route);

  return confirm_form('_pageroute_ui_confirm_del_route', $form,
                  t('Are you sure you want to delete the route %path?',
                  array('%path' => theme('placeholder', $route->path))),
                  'admin/pageroute', t('Deleting a route will delete all the pages you created in it. This action cannot be undone.'),
                  t('Delete'),
                  t('Cancel'));
}

function _pageroute_ui_confirm_del_route_submit($form_id, &$form_values) {
  db_query("DELETE FROM {pageroute_pages} WHERE prid = %d", $form_values['route']->prid);
  db_query("DELETE FROM {pageroute_routes} WHERE prid = %d", $form_values['route']->prid);
  cache_clear_all("menu:", TRUE);
  drupal_set_message('Your route has been deleted.');
  return 'admin/pageroute';  
}



function pageroute_ui_page_edit() {
  
  if (is_numeric(arg(3))) {
    $route = db_fetch_object(db_query("SELECT * FROM {pageroute_routes} WHERE prid = %d", arg(3)));
    $route->options = unserialize($route->options);
  }
  if (!$route) {
    drupal_not_found();
    exit;
  }

  if (arg(4) == 'add') {
    drupal_set_title(check_plain($route->path));    
    if (in_array(arg(5), array_keys(pageroute_get_types()))) {
      $type = arg(5);      
    }
    else {
      return pageroute_ui_page_add_type(); 
    }
  }
  else if (arg(4) != 'edit') {
    return pageroute_ui_route_overview($route);
  }
  else if (arg(5)) {
    $page = db_fetch_object(db_query("SELECT * FROM {pageroute_pages} WHERE prid = %d AND name = '%s'", 
                                     $route->prid, arg(5)));
    if (!$page) {
      drupal_not_found();
      exit;
    }
    drupal_set_title(check_plain($page->name));
    $page->options = unserialize($page->options);
    $type = $page->type;
  }
  
  $form['name'] = array('#type' => 'textfield', 
                        '#title' => t('name'),
                        '#maxlength' => 63,
                        '#default_value' => $page->name,
                        '#required' => TRUE,
                        '#description' => t('Last part of the page\'s URL. Used for identifing the page.'),  
                  );
  $form['name']['name_validated'] = array('#type' => 'value', '#value' => '');


  $form['title'] = array('#type' => 'textfield', 
                         '#title' => t('title'),
                         '#maxlength' => 255,
                         '#default_value' => $page->title,
                         '#description' => t('An optional title which will be set when the page is viewed.'),
                         '#weight' => 1,  
                   );
  $form['options']['activated'] = array('#type' => 'checkbox', 
                                    '#title' => t('Activated'),
                                    '#default_value' => isset($page->options['activated']) ? $page->options['activated'] : 1,
                                    '#description' => t('When the pageroute is genereated, deactivated pages will be ignored.'),
                                    '#weight' => 0,  
                                  );
  $form['options']['forward'] = array('#type' => 'textfield', 
                                      '#title' => t('forward button label'),
                                      '#maxlength' => 32,
                                      '#default_value' => isset($page->options['forward']) ? $page->options['forward'] : t('forward'),
                                      '#description' => t('The label of the forward button. Leave it empty to hide the button.'),
                                      '#weight' => 3,
                                 );
  $form['options']['back'] = array('#type' => 'textfield', 
                                   '#title' => t('back button label'),
                                   '#maxlength' => 32,
                                   '#default_value' => isset($page->options['back']) ? $page->options['back'] : t('back'),
                                   '#description' => t('The label of the back button. Leave it empty to hide the button.'),
                                   '#weight' => 4,
                              );
  $form['options']['#tree'] = TRUE;
  $form['options']['#weight'] = 3;
  pageroute_ui_page_form($form, $route, $page, $type);
  
  $form['weight'] = array('#type' => 'weight',
                          '#title' => t('Weight'),
                          '#default_value' => $page->weight,
                          '#description' => t('Used for ordering the pages. Pages with lower weights are used first.'),
                          '#weight' => 7,  
  );  
  
  $form['submit'] = array('#type' => 'submit',
                          '#value' => t('Submit'),
                          '#weight' => 9,
                    );

  if ($page) {
    $form['delete'] = array('#type' => 'submit',
                            '#value' => t('Delete'),
                            '#weight' => 10,
                      );
  }
  
  $form['page_type'] = array('#type' => 'value', '#value' => $type);
  $form['page'] = array('#type' => 'value', '#value' => $page);
  $form['route'] = array('#type' => 'value', '#value' => $route);
  $form['#validate'] = array('pageroute_ui_page_edit_validate' => array());
  $form['#submit'] = array('pageroute_ui_page_edit_submit' => array());
                    
  return drupal_get_form('pageroute_ui_page_edit', $form);
}

/*
 * Adds the form elements for this page type
 */
function pageroute_ui_page_form(&$form, &$route, &$page, $type) {

  switch ($type) {
    case 'manage':
        $form['options']['content-type'] = array(
          '#type' => 'select',
          '#title' => t('content type'),
          '#options' => node_get_types(),
          '#required' => TRUE,
          '#default_value' => $page->options['content-type'],
          '#weight' => 2,
        );
        $form['options']['empty_add'] = array(
          '#type' => 'checkbox',
          '#title' => t('Display a node add form instead of an empty node list'),
          '#default_value' => $page->options['empty_add'],
          '#weight' => 2,
        );
        $form['options']['add_button'] = array(
            '#type' => 'textfield', 
            '#title' => t('add button label'),
            '#maxlength' => 32,
            '#default_value' => isset($page->options['add_button']) ? $page->options['add_button'] : t('add'),
            '#description' => t('The label of the add button. Leave it empty to hide the button.'),
            '#weight' => 4,
        );
        $groups = array('add' => t('node add form'), 'edit' => t('node edit form'));
        foreach ($groups as $name => $title) {
          $form['options'][$name] = array(
            '#type' => 'fieldset', 
            '#title' => $title,
            '#collapsed' => TRUE,
            '#collapsible' => TRUE,          
            '#weight' => 8,
          );
          $form['options'][$name]['forward'] = array(
            '#type' => 'textfield', 
            '#title' => t('forward button label'),
            '#maxlength' => 32,
            '#default_value' => isset($page->options[$name]['forward']) ? $page->options[$name]['forward'] : t('forward'),
            '#description' => t('The label of the forward button. Leave it empty to hide the button.'),
            '#weight' => 3,
          );
          $form['options'][$name]['back'] = array(
            '#type' => 'textfield', 
            '#title' => t('back button label'),
            '#maxlength' => 32,
            '#default_value' => $page->options[$name]['back'],
            '#description' => t('The label of the back button. Leave it empty to hide the button.'),
            '#weight' => 4,
          );
          $form['options'][$name]['preview'] = array(
            '#type' => 'checkbox',
            '#title' => t('Display preview button'),
            '#default_value' => $page->options[$name]['preview'],
            '#weight' => 5,        
          );
          $form['options'][$name]['submit'] = array(
            '#type' => 'checkbox',
            '#title' => t('Display submit button'),
            '#default_value' => isset($page->options[$name]['submit']) ? $page->options[$name]['submit'] : 1,
            '#weight' => 5,        
          );
          if ($name != 'add') {
            $form['options'][$name]['nodelete'] = array(
              '#type' => 'checkbox',
              '#title' => t('Never display the delete button on editing forms'),
              '#default_value' => isset($page->options[$name]['nodelete']) ? $page->options[$name]['nodelete'] : 1,
              '#weight' => 5,        
            );
            $form['options'][$name]['#weight'] = 9;
          }
        }
      break;
    case 'add':
        $form['options']['content-type'] = array(
          '#type' => 'select',
          '#title' => t('content type'),
          '#options' => node_get_types(),
          '#required' => TRUE,
          '#default_value' => $page->options['content-type'],
          '#weight' => 2,
        );
    case 'edit':
        $form['options']['preview'] = array(
          '#type' => 'checkbox',
          '#title' => t('Display preview button'),
          '#default_value' => $page->options['preview'],
          '#weight' => 5,        
        );
        $form['options']['submit'] = array(
          '#type' => 'checkbox',
          '#title' => t('Display submit button'),
          '#default_value' => isset($page->options['submit']) ? $page->options['submit'] : 1,
          '#weight' => 5,        
        );
        $form['options']['nodelete'] = array(
          '#type' => 'checkbox',
          '#title' => t('Never display the delete button on editing forms'),
          '#default_value' => isset($page->options['nodelete']) ? $page->options['nodelete'] : 1,
          '#weight' => 5,        
        );
      break;
    case 'view':
       $form['options']['nid'] = array(
          '#type' => 'textfield',
          '#title' => t('node ID'),
          '#description' => t('Enter the node ID of the node that should be displayed at this page. Enter 0 to use the second argument as node ID like the node edit page type does.'),
          '#required' => TRUE,
          '#default_value' => $page->options['nid'],
          '#weight' => 2,
        );
      break;
    default:
  }
  if ($type == 'edit') {
    $form['options']['content-type'] = array(
          '#type' => 'select',
          '#title' => t('content type for new nodes'),
          '#options' => array('' => '') + node_get_types(),
          '#default_value' => $page->options['content-type'],
          '#weight' => 2,
          '#description' => t('If there is no node id in the URL, the user will get an node add form for this content-type. Leave this empty, to disable this feature.'),
        );
  }
}


function pageroute_ui_page_edit_validate($form_id, &$form_values, &$form) {
  $name = rtrim(ltrim($form_values['name'], '/'), '/');
  form_set_value($form['name']['name_validated'], $name);
  
  if (strpos($name, '/') !== FALSE) {
    form_set_error('name', t('The page name must not contain a slash "/".'));
  }
  if (!valid_url($name)) {
    form_set_error('name', t('The page name has to be a valid URL.'));
  }  
  if ($form_values['page'] && $form_values['page']->name != $name && 
      db_result(db_query("SELECT * FROM {pageroute_pages} WHERE prid = %d AND name = '%s'", $form_values['route']->prid, $name))) {
    form_set_error('name', t('A page with this name already exists. Choose another name.'));
  }
  if (menu_get_item(NULL, $form_values['route']->path .'/'. $name)) {
    form_set_error('name', t('This drupal path is already in use. Choose another name.'));
  }
}

function pageroute_ui_page_edit_submit($form_id, &$form_values) {
  if ($form_values['page']) {
    if ($_POST['op'] == t('Delete')) {
      return 'admin/pageroute/route/'. $form_values['route']->prid .'/del/' . $form_values['page']->name;
    }
    $edit_page = (object)$form_values;
    $edit_page->name = $edit_page->name_validated;
    pageroute_ui_update_page($form_values['route'], $edit_page, $form_values['page']->name);
    pageroute_ui_update_neighbours($form_values['route']);
  }
  else if (arg(4) == 'add') {
    $edit_page = (object)$form_values;
    db_query("INSERT INTO {pageroute_pages} (prid, name, title, weight, type, options) VALUES(%d, '%s', '%s', %d, '%s', '%s')", 
             $form_values['route']->prid, $form_values['name_validated'], $form_values['title'], $form_values['weight'], arg(5), serialize($edit_page->options));
    pageroute_ui_update_neighbours($form_values['route']);
  }
  cache_clear_all("menu:", TRUE);
  return 'admin/pageroute/route/'. $form_values['route']->prid;
}



function pageroute_ui_route_overview(&$route) {
  
  drupal_set_title(check_plain($route->path));
  $result = db_query("SELECT * FROM {pageroute_pages} WHERE prid = %d ORDER BY weight, name", $route->prid);
  
  $header = array(t('name'), t('title'), t('type'), t('weight'), array('data' => t('Operations'), 'colspan' => '2'));
  $types = pageroute_get_types();
  
  while ($page = db_fetch_object($result)) {
    $page->options = unserialize($page->options);
    $row = array();
    $row[] = l($page->name, $route->path .'/'. $page->name);
    $row[] = check_plain($page->title);
    $row[] = $page->type == 'view' ? l($types[$page->type], 'node/'. $page->options['nid']) : $types[$page->type];
    $row[] = $page->weight;
    $row[] = l(t('edit'), "admin/pageroute/route/$route->prid/edit/$page->name");
    $row[] = l(t('delete'), "admin/pageroute/route/$route->prid/del/$page->name");
    $rows[] = $row;
  }
  
  if (empty($rows)) {
    $rows[] = array(array('data' => t('No pages available.'), 'colspan' => '5', 'class' => 'message'));
  }

  return theme('table', $header, $rows, array('id' => 'pageroute_ui_pages'));
}

/*
 * Shows a form for choosing the inital type of the page
 */
function pageroute_ui_page_add_type() {
  
  $form['type'] = array(
    '#type' => 'radios',
    '#title' => t('Choose a page type'),
    '#options' => pageroute_get_types(),
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => submit,
    '#value' => t('forward'),
  );
  return drupal_get_form('pageroute_ui_page_add_type', $form);
}

function pageroute_ui_page_add_type_validate($form_id, &$form_values, &$form) {
  
  if ($form_values['type'] == 'manage_lonely' && !pageroute_ui_get_lonely_node_types()) {
    form_set_error('type', t('You have no content types with a maximum population of one. To change this go to %link.', 
      array('%link' => l('admin/settings/content-types','admin/settings/content-types'))));
  }
}


function pageroute_ui_page_add_type_submit($form_id, &$form_values) {
  return "admin/pageroute/route/". arg(3) ."/add/". $form_values['type'];
}

function pageroute_ui_page_del() {

  if (arg(5)) {
    $page = db_fetch_object(db_query("SELECT * FROM {pageroute_pages} WHERE prid = %d AND name = '%s'", 
                                     arg(3), arg(5)));
    $page->options = unserialize($page->options);
  }  
  if (!$page ) {
    drupal_not_found();
    exit;
  }
  
  $route = db_fetch_object(db_query("SELECT * FROM {pageroute_routes} WHERE prid = %d", arg(3)));
  $route->options = unserialize($route->options);
  $form['page'] = array('#type' => 'value', '#value' => $page);
  $form['route'] = array('#type' => 'value', '#value' => $route);

  return confirm_form('_pageroute_ui_confirm_del_page', $form,
                  t('Are you sure you want to delete the page %name?',
                  array('%name' => theme('placeholder', $page->name))),
                  'admin/pageroute/route/'. arg(3), t('This action cannot be undone.'),
                  t('Delete'),
                  t('Cancel'));
}

function _pageroute_ui_confirm_del_page_submit($form_id, &$form_values) {
  db_query("DELETE FROM {pageroute_pages} WHERE prid = %d AND name ='%s'", $form_values['page']->prid, $form_values['page']->name);
  pageroute_ui_update_neighbours($route = (object)array('prid' => $form_values['page']->prid));
  cache_clear_all("menu:", TRUE);
  drupal_set_message('Your page has been deleted.');
  return 'admin/pageroute/route/'. $form_values['page']->prid;
}

/*
 * Determines the neighbours for all pages and writes their names
 * into $page->options['neighbours'] with the keys 'back' and 'forward'
 * so that they can be accessed easily on runtime.
 * 
 * All changfes are stored in the database.
 * 
 * @param $route The route, for which the page neighbours should be updated
 */
function pageroute_ui_update_neighbours(&$route) {
  $result = db_query("SELECT * FROM {pageroute_pages} WHERE prid = %d ORDER BY weight, name", $route->prid);
  
  $pages = array();
  $updated = array();
  $back = (object)array('name' => '');

  while ($the_page = db_fetch_object($result)) {
    $the_page->options = unserialize($the_page->options);

    if (isset($the_page->options['activated']) && !$the_page->options['activated']) {
      continue;
    }

    if ($back->name != $the_page->options['neighbours']['back']) {
      $the_page->options['neighbours']['back'] = $back->name;
      $updated[$the_page->name] = $the_page;
    }
    if ($back->name && $back->options['neighbours']['forward'] != $the_page->name) {
      $back->options['neighbours']['forward'] = $the_page->name;
      $updated[$back->name] = $back;
    }
    $back = $the_page;
  }
  if ($back->options['neighbours']['forward'] != '') {
    $back->options['neighbours']['forward'] = '';
    $updated[$back->name] = $back;
  }
  
  //now store all updates in the db
  foreach ($updated as $the_page) {
    pageroute_ui_update_page($route, $the_page, $the_page->name);
  }
}

/*
 * Stores the updated $page in the database
 */
function pageroute_ui_update_page(&$route, &$page, $old_name) {
  db_query("UPDATE {pageroute_pages} SET name = '%s', title='%s', weight = %d, options = '%s' WHERE prid = %d AND name = '%s'", 
             $page->name, $page->title, $page->weight, serialize($page->options), $route->prid, $old_name);
}


/**
 * hunmonk's module dependency check: see http://drupal.org/node/54463
 */
function pageroute_ui_form_alter($form_id, &$form) {
  if ($form_id == 'system_modules' && !$_POST) {
    pageroute_ui_system_module_validate($form);
  }
}

/**
 * hunmonk's module dependency check: see http://drupal.org/node/54463
 */
function pageroute_ui_system_module_validate(&$form) {
  $module = 'pageroute_ui';
  $dependencies = array('pageroute');
  foreach ($dependencies as $dependency) {
      if (!in_array($dependency, $form['status']['#default_value'])) {
        $missing_dependency = TRUE;
        $missing_dependency_list[] = $dependency;
      }
  }
  if (in_array($module, $form['status']['#default_value']) && isset($missing_dependency)) {
    db_query("UPDATE {system} SET status = 0 WHERE type = 'module' AND name = '%s'", $module);
    $key = array_search($module, $form['status']['#default_value']);
    unset($form['status']['#default_value'][$key]);
    drupal_set_message(t('The module %module was deactivated--it requires the following disabled/non-existant modules to function properly: %dependencies', array('%module' => $module, '%dependencies' => implode(', ', $missing_dependency_list))), 'error');
  }
}

function pageroute_ui_get_lonely_node_types() {
  if (!module_exist('nodefamily')) {
    return array();
  }
  $types = node_get_types();
  $lonely_node_types = array();
  foreach($types as $type => $name) {
    if (nodefamily_content_type_get_max($type) == 1) {
      $lonely_node_types[$type] = $name;
    }
  }
  return $lonely_node_types;
}

/*
 * Get the help for all page types and show it
 * 
 * Modules that contribute a page type should implement hook_pageroute_help().
 */
function _pageroute_ui_get_help() {
  $output = '<p>'.t('The module can be used to provide an userfriendly wizard for creating and
editing several nodes. It will provide new URLs for all pages and 
optionally create customizeable back/forward buttons at the bottom of a page, 
so that users are lead through the route.').'</p>';

  $output .= '<h2>Pageroute Arguments</h2>';  
  $output .= '<p>'. t('Each pageroute takes further arguments to its path. The first additional argument is the ID of the user for which the route will be gone through.').
             t('The second argument is interpreted as Node id and is not used by all page types. Have a look at the node edit form type for one that uses this argument.').' '.
             t('E.g. you can link to your pageroute e.g. by using the path "%path" to go through the route as the currently logged in user and with node id 4 as second argument.',
             array('%path' => 'pageroutepath/0/4')) . '</p>';
  
  $output .= '<h2>Page types</h2>';
  $output .= '<p>'.t('Each page has a page type, which sets the behaviour of the page. Every module can contribute further page types.').'</p>';
  
  $type_names = pageroute_get_types();
  foreach (pageroute_get_types('base') as $type => $base) {
    $output .= '<h3>'. $type_names[$type] .'</h3>';
    
    $function = $base . '_pageroute_help';
    if (function_exists($function)) {
      $output .= '<p>'.$function($type).'</p>';
    }
    else {
      $output .= '<p>'.t('For this page type is no help available!').'</p>';
    }
  }

  return $output;
}


/*
 * Implementation of hook_pageroute_help()
 */
function pageroute_pageroute_help($type) {
  
  switch($type) {
    case 'add':
      return t('A page of this type will present a usual node adding form of a configurable content-type.');
    case 'edit':
      $output = t('A page of this type will present a usual node editing form or a node adding form of a configurable content-type.');
      $output .= ' '.t('It will edit the node with the id taken from the second argument to the pageroute\'s path. This type can be configured to show a node add form of a special content-type, if there is now such argument');
      $output .= ' '.t('So with this page type you can build a pageroute, with that you manage the creation and editing of nodes of the same type.');
      return $output;
    case 'manage':
      return t('The node management page allows one to add, edit or delete nodes from a configurable content type. '.
               'It shows a themeable list of already created nodes and allows editing and deleting if the user has access.');
    case 'view':
      return t('This page type just displays a configurable node. It can also be configured to display the node with the id taken from the second argument. '.
               'Combined with a node adding or editing form this enables you to build a page that acts similar as a preview.');
  }
}