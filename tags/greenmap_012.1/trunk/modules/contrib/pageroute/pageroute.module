<?php
// $Id: pageroute.module,v 1.22 2006/12/06 11:46:34 fago Exp $

/**
 * @file
 * Allows the creation of pageroutes.
 */


/**
 * Implementation of hook_help().
 */
function pageroute_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Allows the creation of pageroutes.');
  }
}


/*
 * Get a list of all pageroute page types.
 */
function pageroute_get_types($op = 'list') {
  static $type_list;
  static $type_base;

  if (!isset($type_list)) {
    $page_types = module_invoke_all('pageroute_info');
    foreach ($page_types as $type => $info) {
      $type_list[$type] = $info['name'];
      $type_base[$type] = $info['base'];
    }
  }
  return ($op == 'list') ? $type_list : $type_base;
}

/*
 * Implementation of hook_pageroute_info()
 */
function pageroute_pageroute_info() {
  return array(
    'add' => array('name' => t('node adding form'), 'base' => 'pageroute'),
    'edit' => array('name' => t('node edit form'), 'base' => 'pageroute'),
    'view' => array('name' => t('node display'), 'base' => 'pageroute'),
    'manage' => array('name' => t('node management'), 'base' => 'pageroute'),
  );
}

/**
 * Implementation of hook_menu().
 */
function pageroute_menu($may_cache) {
  global $user;
  
  if ($may_cache) {
    
    $result = db_query("SELECT * FROM {pageroute_routes}");
    while ($route = db_fetch_object($result)) {  
      $route->options = unserialize($route->options);
      pageroute_update_page_index($route);
      
      $items[] = array('path' => $route->path,
        'title' => $route->path,
        'callback' => 'pageroute_load_route',
        'callback arguments' => array($route),
        'access' => array_intersect(array_keys($user->roles), $route->options['access']['allowed_roles']) ? TRUE : FALSE,
        'type' => MENU_NORMAL_ITEM,
      );
    }
    return $items;
  }
}


function pageroute_load_route(&$route) {
  global $page;
  
  //find the page to load
  $page_name = pageroute_arg($route, 0);
  
  if ($page_name) {
    $page = db_fetch_object(db_query("SELECT * FROM {pageroute_pages} WHERE name = '%s' AND prid = %d", $page_name, $route->prid));
  }
  if (!$page) {
    $page = db_fetch_object(db_query_range("SELECT * FROM {pageroute_pages} WHERE prid = %d ORDER BY weight, name", $route->prid, 0, 1));
    $route->options['arg_offset']--;
  }
  $page->route = &$route;
  $page->options = unserialize($page->options);
  
  //add css
  $path = drupal_get_path('module', 'pageroute');
  drupal_set_html_head('<style type="text/css" media="all">@import "/'. $path .'/pageroute.css";</style>');
  
  $types = pageroute_get_types('base');
  $function = $types[$page->type] . '_load_page';
  if (function_exists($function)) {
    if ($route->options['no_messages']) {
      unset($_SESSION['messages']['status']);
    }
    //for most page types the arg_offset will always be 1, so we default to one
    $page->arg_offset = 1;

    return $function($route, $page);
  }
  else {
    return 'Error getting page. Perhaps a module is missing';
  }
}

/*
 * Implementation of the pages
 */
function pageroute_load_page(&$route, &$page) {
  include_once('pageroute_pages.inc');
  return pageroute_load_page_inc($route, $page);
}


/*
 * Prepare for the submit function...
 */
function pageroute_page_form_validate($form_id, &$form_values, &$form) {
  global $page;
  
  //Determine which button has been pressed
  if ($_POST['op']) {
    form_set_value($form['op'], array('key' => 'op'));
    return;
  }
  if ($_POST['op2']) {
    form_set_value($form['op'], array('key' => 'op2'));
    return;
  }
  // A node management add/edit button?
  if (isset($form['output'])) {
    foreach (array_keys($form['output']) as $nid) {
      if ($_POST['op_'. $nid]) {
        form_set_value($form['op'], array('key' => 'op_'. $nid, 'nid' => $nid));
        return;
      }
    }
  }
  // A tab button?
  if ($page->route->options['tabs']) {
    foreach (array_keys($form['tabs']) as $page_name) {
      if ($_POST['op_'. $page_name]) {
        form_set_value($form['op'], array('key' => 'op_'. $page_name, 'page_name' => $page_name));
        return;
      }
    }
  }
}

/*
 * Submit function for all pageroute forms
 */
function pageroute_page_form_submit($form_id, &$form_values) {
  global $page, $user;
  
  //invoke submit hook
  pageroute_invoke('submit', $page);

  if ($form_values['op']['key'] == 'op') {
    if ($_POST['op'] == t($page->options['add_button'])) {
      $path = _pageroute_create_path($page, $page->name .'/add');
    }
    else if ($_POST['op'] == t($page->options['back'])) {
      $path = _pageroute_create_path($page, $page->options['neighbours']['back']);
    }
    else if (($_POST['op'] == t($page->options['forward']) || $_POST['op'] == t('Submit')) && $page->options['neighbours']['forward']) {
      $path = _pageroute_create_path($page, $page->options['neighbours']['forward']);
    }
  }
  else if ($form_values['op']['key'] == 'op2' && $page->type) {
    $path = _pageroute_get_path($page);
  }
  else if ($form_values['op']['nid']) {
    if ($_POST[$form_values['op']['key']] == t('edit')) {
      $path = _pageroute_create_path($page, $page->name .'/edit/'. $form_values['op']['nid']);
    }
    else if ($_POST[$form_values['op']['key']] == t('delete')) {
      $path = _pageroute_create_path($page, $page->name .'/delete/'. $form_values['op']['nid']);
    }
  }
  else if ($form_values['op']['page_name']) {
    $path = _pageroute_create_path($page, $form_values['op']['page_name']);
  }

  if ($path && $page->route->options['destination'] && isset($_REQUEST['destination'])) {
    $destination = drupal_get_destination();
    unset($_REQUEST['destination']);
    return array($path, $destination);
  }
  else {
    return $path;
  }
}

/*
 * Wrapper around arg()
 * Get the next arguments after the page name
 * (Argument 0 is the page name)
 */
function pageroute_arg(&$route, $index) {
  return arg($route->options['arg_offset'] + $index);
}

/*
 * Wrapper around arg()
 * Get the next argument after all page arguments
 * @param $index Starting with 0
 */
function pageroute_page_arg(&$page, $index) {
  $arg = pageroute_arg($page->route, $page->arg_offset + $index);
  if (is_null($arg) && !is_null($page->_new_arg[$index])) {
    return $page->_new_arg[$index];
  }
  return $arg;
}

/*
 * Allows pages to add new arguments.
 * They will be used for the generation of the next path.
 */
function pageroute_page_new_arg(&$page, $arg, $index) {
  $i = 0;
  while ($i < $index && is_null(pageroute_page_arg($page, $i))) {
    $page->_new_arg[$i] = 0;
    $i++;
  }
  $page->_new_arg[$index] = $arg;
}

/*
 * The first page argument is the uid, for which the page should be loaded
 */
function pageroute_page_get_uid(&$page) {
  global $user;
  $uid = pageroute_page_arg($page, 0);
  return (!is_numeric($uid) || $uid == 0) ? $user->uid : $uid;
}

/*
 * Gets the default path of the current page
 */
function _pageroute_get_path(&$page) {
  return _pageroute_create_path($page, $page->name);
}

/*
 * Creates a path while keeping all arguments
 * @param $page The page object of the current page
 * @param $next The string, e.g. page name for the next page
 */
function _pageroute_create_path(&$page, $next) {
  
  $path = array($page->route->path, $next);
  
  $arg = pageroute_page_arg($page, $index = 0);
  while (!is_null($arg)) {
    $path[] = $arg;
    $arg = pageroute_page_arg($page, ++$index);
  }
  return implode('/', $path);  
}

/*
 * Loads the page list for a route
 */
function pageroute_update_page_index(&$route) {
  $result = db_query("SELECT * FROM {pageroute_pages} WHERE prid = %d ORDER BY weight, name", $route->prid);

  $index = 0;
  while ($page = db_fetch_object($result)) {
    $page->options = unserialize($page->options);
    if (isset($page->options['activated']) && !$page->options['activated']) {
      continue;
    }
    
    $route->pages[$index] = array($page->name => $page->title);
    $route->page_index[$page->name] = $index;
    $index++;
  }
}


/*
 * Invokes hook_pageroute()
 * 
 * Currently available operations:
 *   (*) load: This is called before a page is rendered.
 */
function pageroute_invoke($op, &$page) {
  foreach (module_implements('pageroute') as $module) {
    $function = $module .'_pageroute';
    $function($op, $page);
  }
}


/*
 * Returns the buttons for a page
 * 
 * @param $array Don't run drupal_get_form if this is true
 */
function pageroute_get_buttons(&$page, &$form, $array = TRUE, $button_name = 'op')  {

  if ($page->type == 'manage' && $form['#node']) {
    $options = $form['#node']->nid ? $page->options['edit'] : $page->options['add'];
  }
  else {
    $options = &$page->options;
  }
  
  foreach (array('back', 'forward') as $key => $name) {
    if ($options[$name] && ($page->options['neighbours'][$name] || 
       ($key && $page->route->options['last_button'] && isset($_REQUEST['destination'])) ||
       ($page->type == NODE_MANAGE && $form)) ) {

      $form['buttons'][$name]['#attributes']['class'] = 'pageroute-'. $name;
      $form['buttons'][$name]['#type'] = 'submit';
      $form['buttons'][$name]['#value'] = t($options[$name]);
      $form['buttons'][$name]['#name'] = $button_name;
      $form['buttons'][$name]['#weight'] = 10 + $key;
    }
  }
  if ($form['buttons']) {
    $form['buttons']['#prefix'] = '<span class="pageroute_buttons">';
    $form['buttons']['#suffix'] = '</span>';            
    $form['buttons']['#weight'] = 50;
  }
  if (!$array) {
    $form['op'] = array('#type' => 'value');
    return drupal_get_form('pageroute_'. $page->name, $form, 'pageroute_page_form');
  }
}


/*
 * Returns the buttons for a page
 * 
 * @param $array Don't run drupal_get_form if this is true
 */
function pageroute_get_tabs(&$page, &$form, $array = TRUE)  {

  if (!$page->route->options['tabs'] || $page->route->tabs_displayed) {
    return;
  }
  //mark as displayed
  $page->route->tabs_displayed = TRUE;
  //is this page the next one after the routes state?
  $page->after_state = ($page->options['neighbours']['back'] == $page->route->state);

  foreach ($page->route->pages as $index => $data) {
    foreach ($data as $name => $title) {
      $form['tabs'][$name] = array(
        '#type' => 'submit',
        '#value' => $title ? $title : $name,
        '#name' => 'op_'. $name,
      );
      if ($after_state && !($page->after_state && $after_state == 1)) {
        $form['tabs'][$name]['#attributes'] = array('class' => 'distant', 'disabled' => 'disabled');
      }
      if (isset($after_state)) {
        $after_state++;
      }
      if (!isset($after_state) && ($page->route->state == $name || $page->route->state == t('creation'))) {
        $after_state = 0;
      }
    }
  }
  
  $output = theme('pageroute_route_tabs', $form['tabs'], $page);
  if (is_array($output)) {
    $form['tabs'] = $output;
  }
  else {
    $form['tabs'] = array('#value' => $output);
  }
  $form['tabs']['#weight'] = -100;  
  
  if (!$array) {
    $form['op'] = array('#type' => 'value');
    return drupal_get_form('pageroute_tabs_'. $page->name, $form, 'pageroute_page_form');
  }
}

/*
 * Themes the tab-like submit buttons of a route
 *
 * @param $form The whole $form array
 * @param $page The currently viewed page
 */
function theme_pageroute_route_tabs($form, $page) {

  $form['#prefix'] = '<div class="pageroute-tabs">';
  $form['#suffix'] = '</div>';
  return $form;
}