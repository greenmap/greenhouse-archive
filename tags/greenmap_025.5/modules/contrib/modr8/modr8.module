<?php
// $Id: modr8.module,v 1.1.2.7 2007/02/09 03:03:30 pwolanin Exp $

/**
 * @file
 * Easy dedicated content moderation
 * 
 * @todo
 * - add comment moderation (separate tab)
 * - prepare for 4.8 by maintaining a separate table and some nodeapi stuff
 */

/**
 * Implementation of hook_help().
 */
function modr8_help($section) {
  switch ($section) {
    case 'admin/help#modr8':
      return t('TODO: Create admin help text.');
    case 'admin/modules#description':
      return t('Moderation of content');
    // OPTIONAL: Add additional cases for other paths that should display help text.
  }
}


/**
 * Implementation of hook_menu().
 */
function modr8_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/modr8',
      'title' => t('moderate content'),
      'access' => user_access('moderate content'),
      'callback' => 'modr8_page',
    );
  }

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function modr8_perm() {
  return array('moderate content');  
}

/**
 * Implementation of hook_settings().
 */
function modr8_settings() {  
  $form['modr8_default_option'] = array(
    '#type' => 'radios',
    '#title' => t('Which action option should be selected by default?'),
    '#options' => array(
      'approve' => t('approve'),
      'delete' => t('delete'),
      'nada' => t('no action'),
    ),
    '#default_value' => variable_get('modr8_default_option', 'nada'),
  );

  $form['modr8_nodes_per_page'] = array(
    '#type' => 'select',
    '#title' => t('How many posts should be displayed per page?'),
    '#options' => drupal_map_assoc(array(5, 10, 15, 20, 25, 50, 75, 100, 150, 200)),
    '#default_value' => variable_get('modr8_nodes_per_page', 10),
  );
  
  $form['modr8_publish'] = array(
    '#type' => 'checkbox',
    '#title' => t('Publish approved posts'),
    '#default_value' => variable_get('modr8_publish', FALSE),
    '#description' => t('When the moderator approves a post, publish it if the post is currently unpublished.'),
  );
  
  $form['text'] = array(
    '#type' => 'fieldset',
    '#title' => t('email'),
  );
  
  $form['text']['modr8_send_approve'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send approval messages'),
    '#default_value' => variable_get('modr8_send_approve', FALSE),
  );
  
  $form['text']['modr8_accepted_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Acceptance Email Subject'),
    '#default_value' => variable_get('modr8_accepted_subject', "[%site] %title has been approved"),
  );
  
  $macros = implode(', ', array_keys(modr8_replacements()));
  
  $accept_default = modr8_accept_default();
  
  $form['text']['modr8_accepted_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Acceptance Email'),
    '#default_value' => variable_get('modr8_accepted_text', $accept_default),
  	'#description' => t('Replacement strings are: %macros', array('%macros' => $macros)),
  );
  
  $form['text']['modr8_send_deny'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send denial messages'),
    '#default_value' => variable_get('modr8_send_deny', FALSE),
  );
  
  $form['text']['modr8_denial_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Denail Email Subject'),
    '#default_value' => variable_get('modr8_denial_subject', "[%site] %title has been denied"),
  );
  
  $denial_default = modr8_denial_default();

  $form['text']['modr8_denial_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Denial Email'),
    '#default_value' => variable_get('modr8_denial_text', $denial_default),
  	'#description' => t('Replacement strings are: %macros', array('%macros' => $macros)),
  );
  
  return $form;
}

/**
 * Implementation of hook_nodeapi
 */
function modr8_nodeapi(&$node, $op, $teaser = NULL, $page = NULL){
  // add messages here...
  if ($node->moderate) {
	  switch ($op) {
	    case 'view':
	      if ($node->moderate & !isset($node->modr8_form_teaser)) {
	      	$node->teaser = theme('modr8_message', TRUE, $node->type, $op) . $node->teaser;
	      }
	      else {
	      	$node->body = theme('modr8_message', FALSE, $node->type, $op) . $node->body;
	      }
	    	break;
	    case 'update' :
	    case 'insert' :
          theme('modr8_message', FALSE, $node->type, $op);
	  }
  }
  elseif($op == 'submit'){
		// if not administrator, go BACK into moderation upon editing
		if (!user_access('administer nodes') && in_array('moderate', variable_get('node_options_'. $node->type, array()))){
			$node->moderate = TRUE;
            theme('modr8_message', FALSE, $node->type, $op);
		}
  }
}

function modr8_form_alter($form_id, &$form){
  $type = $form['#node']->type;
  if ($form_id == $type.'_node_form') {
  		if (in_array('moderate', variable_get('node_options_'. $type, array()))){
  		  $form['submit']['#suffix'] .= '<div style="font-size: small">'.
					t(' This %type will be submitted for moderation and will not be accessible to other users until it has been approved.',
					array('%type' => node_get_name($type))) .'</div>';
		}
  }
}

/**
 * Menu callback; displays the content moderation form.
 */
function modr8_page() {
  
  $form = array(
    '#theme' => 'moder8_form',
    '#tree' => TRUE,
  );
  $result = pager_query(db_rewrite_sql('SELECT n.nid FROM {node} n WHERE n.moderate = 1 ORDER BY n.created DESC'), variable_get('modr8_nodes_per_page', 10));
  while ($r = db_fetch_object($result)) {
    $node = node_load($r->nid);
    // This flag can be used by modr8, or other modules to change the teaser specifically
    // for when it's being shown in the moderation list.
    $node->modr8_form_teaser = TRUE;
    $teaser = node_view($node, TRUE, FALSE, FALSE);
    $form[$node->nid] = array(
      '#tree' => TRUE,
    );
    $form[$node->nid]['ops'] = array(
      '#type' => 'radios',
      '#options' => array(
        'approve' => t('approve'),
        'delete' => t('delete'),
        'nada' => t('no action'),
      ),
      '#default_value' => variable_get('modr8_default_option', 'nada'),
    );
    if (variable_get('modr8_send_approve', FALSE) || variable_get('modr8_send_deny', FALSE)) {
      $form[$node->nid]['note'] = array(
        '#type' => 'textarea',
        '#title' => t('note to author'),
        '#cols' => 10, // keep it narrow
      );
    }
    $form[$node->nid]['preview'] = array(
      '#type' => 'markup',
      '#value' => $teaser
    );
    $form[$node->nid]['title'] = array(
      '#type' => 'value',
      '#value' => check_plain($node->title),
    );
    
    $form[$node->nid]['type'] = array(
      '#type' => 'value',
      '#value' => node_get_name($node),
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  $output = drupal_get_form('moder8_form', $form);
  $output .= theme('pager');
  return $output;
}

/**
 * Themes the content moderation form.
 */
function theme_moder8_form(&$form) {
  $headers = array(
    t('operations'),
    t('content')  
  );
  foreach (element_children($form) as $key) {
    // Only do this for nodes; not the submit button.
    if (is_numeric($key)) {
      $row = array();
      if (variable_get('modr8_send_approve', FALSE) || variable_get('modr8_send_deny', FALSE)) {
        $note_field = form_render($form[$key]['note']);
      }
      $row[] = array(
        'data' => form_render($form[$key]['ops']) . $note_field,
        'style' => 'vertical-align:top;'
      );
      $row[] = array(
        'data' => form_render($form[$key]['preview']),
        'style' => 'vertical-align:top;',
      );
      $rows[] = $row;
    }
  }
  $output = theme('table', $headers, $rows);
  $output .= form_render($form);

  return $output;
}

/**
 * Form submit handler, which approves or deletes the node.
 */
function moder8_form_submit($form_id, $form_values) {
  foreach ($form_values as $nid => $values) {
    switch ($values['ops']) {
      case 'approve':
        if(variable_get('modr8_send_approve', FALSE)){
          modr8_usermail('approve', $nid, $values);
        }
        $publish = variable_get('modr8_publish', FALSE) ? ', status = 1' : ''; 
        db_query("UPDATE {node} SET moderate = 0". $publish ." WHERE nid = %d", $nid);
        cache_clear_all();
        drupal_set_message(t('The %type %title has been approved.', array('%title' => theme('placeholder', $values['title']), '%type' => $values['type'])));
        break;
      case 'delete':
        if(variable_get('modr8_send_deny', FALSE)){
          modr8_usermail('deny', $nid, $values);
        }
        node_delete($nid);
        // drupal does its own message
        break;
    }
  }
}

function modr8_usermail($op, $nid, $values){
  $node = node_load($nid);
  
  if (is_object($node)) {
    
    switch ($op) {
      case 'approve':
        $subject = variable_get('modr8_accepted_subject', '[%site] %title has been approved');
        $message = variable_get('modr8_accepted_text', modr8_accept_default());
        $optype = t('approval');
        break;
      case 'deny':
        $subject = variable_get('modr8_denial_subject', '[%site] %title has been denied');
        $message = variable_get('modr8_denial_text', modr8_denial_default());
        $optype = t('denial');
        break;
    }
    
    // get the user info for author
    $account = user_load(array('uid' => $node->uid));
    
    $note = theme('modr8_note', $values['note']);
    
    // eval the replacements
    $replacements_raw = modr8_replacements();
    foreach ($replacements_raw as $key => $val) {
      eval('$replacements["$key"] = '. $val .';');
    }
    
    // replace the macros
    $subject = strtr($subject, $replacements);
    $message = strtr($message, $replacements);
    
    $site_mail = variable_get('site_mail', "");
    if (!strlen($site_mail)) {
      drupal_set_message(t('You should create an administrator mail address for your site! <a href="%url">Do it here</a>.', array('%url' => url('admin/settings'))), 'error');
      $site_mail = 'nobody@localhost';
    }
    $header = "From: ". $site_mail ."\r\n";
    // send the email
    if (user_mail($account->mail, $subject, $message, $header)) {
      drupal_set_message(t('%type message was sent to %username', array('%type' => $optype, '%username' => $account->name)));
    }
    else {
      drupal_set_message(t('There was a problem sending the %type message to %username', array('%type' => $optype, '%username' => $account->name)), 'error');
    }
  }
  else {
    drupal_set_message(t('An error occurred when trying to load this content.')); // this probably won't ever get called
  }
}

function modr8_accept_default() {
  return t(
'Your %type entry entitled "%title" has been approved by our content moderator! Other visitors to %site will now be able to view it.

You can visit %node_url to view it yourself.

%note

Regards,
The %site team');
}

function modr8_denial_default() {
  return t(
'Your %type entry entitled "%title" has been denied by our content moderator. The content has been deleted from our site.

%note

Regards,
The %site team');
}

function modr8_replacements(){
  return array(
    '%title' => '$node->title',
    '%teaser' => '$node->teaser',
    '%body' => '$node->body',
    '%short_date' => 'format_date($node->created, "short")',
    '%medium_date' => 'format_date($node->created, "medium")',
    '%long_date' => 'format_date($node->created, "long")',
    '%type' => 'node_get_name($node)',
    '%node_url' => 'url("node/". $node->nid, NULL, NULL, TRUE)',
    '%author_name' => '$account->name',
    '%author_mail' => '$account->mail',
    '%author_url' => 'url("user/". $account->uid, NULL, NULL, TRUE)',
    '%site' => 'variable_get("site_name", "Drupal")',
    '%note' => '$note',
  );
}

function theme_modr8_note($note){
  if ($note){
    $note = t("Note:
  %note", array('%note' => $note));
  }
  return $note;
}

function theme_modr8_message($teaser = FALSE, $nodetype = 'page', $op = 'view') {
  if ($teaser) {
    return ' <div class="marker">'. t('pending moderation') .'</div>';
  }
  else {
    drupal_set_message(t('The post has been submitted for moderation and won\'t be accessible until it has been approved.'));
    return '';
  }
}
