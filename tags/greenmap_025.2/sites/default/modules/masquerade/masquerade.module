<?php
// $Id: masquerade.module,v 1.13.2.2 2009/02/10 16:31:56 deekayen Exp $

/**
 * @file masquerade.module
 *
 * The masquerade module allows administrators to masquerade as other user.
 */

/**
 * Implementation of hook_help()
 */
function masquerade_help($section) {
  switch ($section) {
    case 'admin/help#masquerade':
      return t("<p>The masquerade module adds a link on a user's profile page that allows administrators to masquerade as that user. Upon masquerading, the open to 'switch back' to the original user will appear in the menus. While masquerading, the option to masquerade as another user will not appear. All masquerading transactions are logged, and $user->masquerading will be set; this could be displayed via theme.</p><p>In the masquerade settings a list of roles are presented; any checked role is considered an 'administrator' and requires the second level 'masquerade as admin' permission to masquerade as. User #1 is automatically considered an administrator, regardless of roles.");
    case 'admin/modules#description':
      return t("The masquerade module allows administrators to masquerade as other users.");
  }
}

/**
 * Implementation of hook_menu()
 */
function masquerade_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $default_test_user = user_load(array('name' => variable_get('masquerade_test_user', 0)));

    $items[] = array('path' => 'masquerade/switch',
      'title' => t('switch user'),
      'callback' => 'masquerade_switch_user',
      'access' => !$GLOBALS['masquerading'] && (user_access('masquerade as user') || user_access('masquerade as admin')),
      'type' => MENU_CALLBACK);

    $items[] = array('path' => 'masquerade/quickswitch',
      'title' => t('switch to test user'),
      'callback' => 'masquerade_switch_user',
      'callback arguments' => array($default_test_user->uid),
      'access' => !$GLOBALS['masquerading'] && (user_access('masquerade as user') || user_access('masquerade as admin')),
      'type' => MENU_NORMAL_ITEM);

    $items[] = array('path' => 'masquerade/unswitch',
      'title' => t('switch back'),
      'callback' => 'masquerade_switch_back',
      'access' => $GLOBALS['masquerading'],
      'type' => MENU_NORMAL_ITEM);
  }

  return $items;
}

/**
 * Implementation of hook_init()
 */
function masquerade_init() {
  global $user;

  // load from table uid + session id
  $uid = db_result(db_query("SELECT uid_from FROM {masquerade} WHERE sid = '%s' AND uid_as = %d", session_id(), $user->uid));
  // using if so that we get unset rather than false if not masqing
  if ($uid) {
    $GLOBALS['masquerading'] = $uid;
  }
	else{
    $GLOBALS['masquerading'] = null;
	}
}

/**
 * Implementation of hook_user()
 */
function masquerade_user($op, &$edit, &$edit_user, $category = NULL) {
  switch ($op) {

    case 'logout':
      if (!empty($edit_user->masquerading)) {
        global $user;
        cache_clear_all("menu:".$user->uid.":", true);
        $real_user = user_load(array('uid' => $user->masquerading));
        watchdog('masquerade', "User '$real_user->name' no longer masquerading as '$user->name'");
        db_query("DELETE FROM {masquerade} WHERE sid = '%s' AND uid_as = %d", session_id(), $edit_user->uid);
      }
      break;

    case 'view':
      // check if user qualifies as admin
      $roles = array_keys(array_filter(variable_get('masquerade_admin_roles', array())));
      $perm = $edit_user->uid == 1 || array_intersect(array_keys($edit_user->roles), $roles) ?
        'masquerade as admin' :
        'masquerade as user';

      global $user;
      if (user_access($perm) && !$edit_user->masquerading && $user->uid != $edit_user->uid) {
        $items[] = array(
          'title' => t("Masquerade"),
          'value' => l(t('Masquerade as %s', array('%s' => $edit_user->name)), "masquerade/switch/$edit_user->uid", array('destination' => $_GET['q'])),
          'class' => 'masquerade',
        );
        return array(t('Masquerade') => $items);
      }
      break;
  }
}

/**
 * Implementation of hook_perm()
 */
function masquerade_perm() {
  return array('masquerade as user', 'masquerade as admin');
}

/**
 * Implementation of hook_settings()
 */
function masquerade_settings() {
// create a list of roles; all selected roles are considered administrative.
  $rids = array();
  $result = db_query("SELECT r.rid, r.name FROM {role} r ORDER BY r.name");
  while ($obj = db_fetch_object($result)) {
    $rids[$obj->rid] = $obj->name;
  }

  $test_user_id = variable_get('masquerade_test_user', '');
  if (!test_user_id) {
    $test_user = user_load(array('uid' => 1));
  }
  else {
    $test_user = user_load(array('name' => $test_user_id));
  }

  $form['masquerade_admin_roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t("Roles that are considered 'admins' for masquerading"),
    '#default_value' => variable_get('masquerade_admin_roles', array()),
    '#options' => $rids,
  );

  $form['masquerade_test_user'] = array(
    '#type' => 'textfield',
    '#title' => 'Default test user',
    '#default_value' => check_plain($test_user->name),
    '#description' => 'Enter the username of an account you wish to switch easily between. The name must be an exisiting user.',
  );

  $form['#validate'] = array(
    'masquerade_settings_validate' => array()
  );

  return $form;
}

function masquerade_settings_validate($form_id, $form_value) {
  $test_user = user_load(array('name' => $form_value['masquerade_test_user']));
  if (!$test_user) {
    form_set_error('masquerade_test_user', t('The name of the default test user is not an existing user.'));
  }
}

/**
 * Page callback that allows a user with the right permissions to become
 * the selected user.
 */
function masquerade_switch_user($uid) {
  $new_user = user_load(array('uid' => $uid));
  if (!$new_user) {
    return drupal_not_found();
  }

  $roles = array_keys(array_filter(variable_get('masquerade_admin_roles', array())));
  $perm = $uid == 1 || array_intersect(array_keys($new_user->roles), $roles) ?
    'masquerade as admin' :
    'masquerade as user';
  // check to see if we need admin permission
  if (!user_access($perm)) {
    return drupal_access_denied();
  }

  global $user;
  // write record

  if ($user->uid == $uid || $user->masquerading) {
    return drupal_access_denied();
  }

  db_query("INSERT INTO {masquerade} (uid_from, uid_as, sid) VALUES (%d, %d, '%s')",
    $user->uid, $new_user->uid, session_id());
  // switch user

  watchdog('masquerade', "User '$user->name' now masquerading as '$new_user->name'");
  drupal_set_message('Viewing site as user ' . $new_user->name . '.');
  $user->masquerading = $new_user->uid;
  $user = $new_user;
  drupal_goto(referer_uri());
}

/**
 * Page callback that allows a user who is currently masquerading to become
 * a new user.
 */
function masquerade_switch_back() {
  // switch user
  global $user;
  cache_clear_all("menu:".$user->uid.":", true);
  $uid = db_result(db_query("SELECT uid_from FROM {masquerade} WHERE sid = '%s' AND uid_as = %d ", session_id(), $user->uid));
  // erase record
  db_query("DELETE FROM {masquerade} WHERE sid = '%s' AND uid_as = %d ", session_id(), $user->uid);
  $oldname = $user->name;
  $user = user_load(array('uid' => $uid));
  watchdog('masquerade', "User '$user->name' no longer masquerading as '$oldname'");
  drupal_set_message('Viewing site as user ' . $user->name . '.');
  drupal_goto(referer_uri());
}

