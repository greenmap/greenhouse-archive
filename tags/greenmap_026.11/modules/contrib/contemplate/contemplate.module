<?php
// $Id: contemplate.module,v 1.5 2006/06/22 23:58:11 jjeff Exp $
// by Jeff Robbins - Lullabot - www.lullabot.com

/**
 * @file
 * Create templates to customize teaser and body content.
 * 
 * @todo 
 * - allow deletion of templates
 */

/**
 * Implementation of hook_help().
 */
function contemplate_help($section) {
  switch ($section) {
    case 'admin/help#contemplate':
      return t('<p>The Content Template (a.k.a. contemplate) module allows modification of the teaser and body fields using administrator defined templates. These templates use PHP code and all of the node object variables are available for use in the template. An example node object is displayed and it is as simple as clicking on its properties to add them to the current template.</p>

<p>This module was written to solve a need with the Content Construction Kit (CCK), where it had a tendency toward outputting content in a not-very-pretty way. And as such, it dovetails nicely with CCK, adding a "template" tab to CCK content-type editing pages and pre-populating the templates with CCK\'s default layout. This makes it easy to rearrange fields, output different fields for teaser and body, remove the field title headers, output fields wrapped for use with tabs.module (part of JSTools), or anything you need.</p>

<p>But Content Template can actually be used on any content type and allows modification of the teaser and body properties before they go out in an RSS feed or are handed off to the theme.</p>');
    case 'admin/modules#description':
      return t('Content Templates: Create templates to customize teaser and body content.');
  }
}


/**
 * Implementation of hook_menu().
 */
function contemplate_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/node/template',
      'title' => t('templates'),
      'access' => user_access('administer templates'),
      'callback' => 'contemplate_edit_type'
    );
  }
  else {
    if (arg(0) == 'admin' && arg(1) == 'node' && arg(2) == 'types' && arg(3)) {
      $access = user_access('administer templates');

      $items[] = array(
        'path' => 'admin/node/types/'. arg(3) .'/template',
        'title' => t('template'),
        'callback' => 'contemplate_edit_type',
        'access' => $access,
        'callback arguments' => array(arg(3)),
        'type' => MENU_LOCAL_TASK,
        'weight' => 7,
      );
      
    }
  }
  
  return $items;
}

/**
 * Implementation of hook_perm()
 *
 */
function contemplate_perm(){
  return array('administer templates');
}


/**
 * Implementation of hook_nodeapi().
 */
function contemplate_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {

    case 'view':
      /*
      print "teaser: ";
      print_r($teaser);
      print "<br />page: ";
      print_r($page);
      print "<br />";
      */
    case 'rss item':
      if ($template = contemplate_get_template($node->type)){
        if($teaser){
          $node->teaser = contemplate_eval($template->teaser, $node);
        }
        else {
          $node->body = contemplate_eval($template->body, $node);
        }
      }
      break;
        
  }
}

/**
 * Admin page... list out the node types
 *
 */
function contemplate_admin(){
  $types = node_get_types();
  $templates = contemplate_get_templates();
  foreach($types as $type => $name){
    $rows[] = array(
      $name,
      l($templates[$type] ? t('edit template') : t('create template'), 'admin/node/template/'. $type),
    );
  }
  $header = array(
    t('content type'),
    ''
  );
  $output .= theme("table", $header, $rows);
  $output .= contemplate_version();
  return $output;
}

/**
 * Menu callback
 * Edit the template for a specific node-type
 *
 * @param string $type
 */
function contemplate_edit_type($type = NULL){
  $types = node_get_types();
  if(!$types[$type]){ // if the argument isn't a valid node type, output admin page
    return contemplate_admin();
  }
  
  if (!(arg(0) == 'admin' && arg(1) == 'node' && arg(2) == 'types' && arg(3))){
    drupal_set_title(t('template for %type', array("%type" => $types[$type])));
    $breadcrumbs = drupal_get_breadcrumb(); 
    $breadcrumbs[] = l(t('templates'), 'admin/node/template'); 
    drupal_set_breadcrumb($breadcrumbs);
  }
  else {
    drupal_set_title($types[$type]); // abbreviated title for cck tabs
  }
  
  $example = contemplate_examples($type);
  
  $template = contemplate_get_template($type);
  
  if($default = contemplate_cck_get_fields($type)){
    $default_teaser = $default_body = $default;
  }
  else {
    $default_teaser = "<?php print \$teaser ?>\n";
    $default_body = "<?php print \$body ?>\n";
  }
  
  $form['teaser']['teaser'] = array(
    '#type' => 'textarea',
    '#title' => t('Teaser Template'),
    '#default_value' => $template->teaser ? $template->teaser : $default_teaser,
    '#rows' => 15,
    '#prefix' => '<div class="contemplate-input">',
    '#suffix' => '</div>',
  );
  
  /*
  $form['teaser']['teaser_example'] = array(
    '#type' => 'fieldset',
    '#title' => t('Teaser Variables'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#attributes' => array('style' => 'width:45%; float:left;')
  ); 
  */
  
  $intro = t("
    <p>An example node has been loaded and it's properties appear below. Click on the the property names to add them to your template.</p>
  ");
  
  $form['teaser']['teaser_example'] = array(
    '#type' => 'markup',
    '#value' => '<div class="contemplate-tips form-item"><label>Teaser Variables:</label><div class="contemplate-scroller">'. $intro . $example['teaser'] .'</div></div>'
  );
  
  $form[] = array(
    '#type' => 'markup',
    '#value' => '<div style="clear:both"> </div>',
  );
  
  $form['body']['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body Template'),
    '#default_value' => $template->body ? $template->body : $default_body,
    '#rows' => 15,
    '#prefix' => '<div class="contemplate-input">',
    '#suffix' => '</div>',
  );
  
  /*
  $form['body']['body_example'] = array(
    '#type' => 'fieldset',
    '#title' => t('Body Variables'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#attributes' => array('style' => 'width:45%; float:left;')
  );
  */
  
  $intro = t("
    <p>An example node has been loaded and it's properties appear below. Click on the the property names to add them to your template.</p>
  ");
  
  $form['body']['body_example'] = array(
    '#type' => 'markup',
    '#value' => '<div class="contemplate-tips form-item"><label>Body Variables:</label><div class="contemplate-scroller">'. $intro . $example['body'] .'</div></div>'
  );
  
  $form[] = array(
    '#type' => 'markup',
    '#value' => '<div style="clear:both"> </div>',
  );
  
  $form['type'] = array(
    '#type' => 'hidden',
    '#value' => $type,
  );
  
  $form['reset'] = array(
    '#type' => 'submit',
    '#value' => t('Reset'),
    '#attributes' => array('onclick' => 'return(confirm("'. t("Are you sure you want to reset this form?\\nAny customizations will be lost.") .'"));'),
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  
  $output .= drupal_get_form('contemplate', $form, 'contemplate_sumbit');
  return $output;
}

/**
 * Get a single template
 *
 */
function contemplate_get_template($type){
  //only load each template once per page hit
  static $types = array();
  
  if(!$types[$type]){
    $types[$type] = db_fetch_object(db_query('SELECT body, teaser, type FROM {contemplate} WHERE type = "%s"', $type));
  }
  
  return $types[$type];
}

/**
 * Get all of the current templates
 *
 * @return unknown
 */
function contemplate_get_templates(){
  $result = db_query('SELECT * FROM {contemplate}');
  while($r = db_fetch_object($result)){
    $templates[$r->type]['teaser'] = $r->teaser;
    $templates[$r->type]['body'] = $r->body;
  }
  return $templates;
}

function contemplate_submit($form_id, $form_values){
  $op = isset($_POST['op']) ? $_POST['op'] : '';
  if ($op == t('Reset')) {
    contemplate_delete($form_values['type']);
    drupal_set_message(t('%type template has been reset.', array("%type" => $form_values['type'])));
  }
  else {
    contemplate_save($form_values);
    drupal_set_message(t('%type template saved.', array('%type' => $form_values['type'])));
    if (arg(0) == 'admin' && arg(1) == 'node' && arg(2) == 'template'){
      drupal_goto('admin/node/template');
    }
  }
}

function contemplate_save($edit){
  contemplate_delete($edit['type']);
  return db_query('INSERT INTO {contemplate} (type, teaser, body) VALUES ("%s", "%s", "%s")', $edit['type'], $edit['teaser'], $edit['body']);
}

function contemplate_delete($type){
  return db_query('DELETE FROM {contemplate} WHERE type = "%s"', $type);
}


/**
 * Load an example node and display its parts
 * - used only on template edit page
 * 
 * @param $type
 *   node type
 * @return array
 */
function contemplate_node_views($type){
  $nid = db_result(db_query('SELECT nid FROM {node} WHERE type = "%s" ORDER BY created DESC', $type));
  if($nid){
    $node = node_load($nid);
    $body = contemplate_node_view($node, FALSE, TRUE); // I realize I'm making an assumption here
    $teaser = contemplate_node_view($node, TRUE, FALSE); // again: assumption... would probably be better to allow all variations of teaser, page...
    return array('body'=>$body, 'teaser'=>$teaser);
  }
  else {
    return FALSE;
  }
}

/**
 * Load an example node and display its parts
 * - used only on template edit page
 *
 * @param $type
 *   node type
 * @return
 *   an array containing the 'body' and 'teaser' versions of the 
 */
function contemplate_examples($type){
  $path = drupal_get_path('module', 'contemplate');
  drupal_add_js($path .'/contemplate.js');
  theme('add_style', $path .'/contemplate.css');
  
  if($views = contemplate_node_views($type)){
    $boutput = contemplate_array_variables((array)$views['body'], 'body');
    $toutput = contemplate_array_variables((array)$views['teaser'], 'teaser');
  }
  else {
    $error = t('No %type content items exist to use as an example. Please create a %type item and then come back here to see an output of its parts.', array("%type"=> $type));
    $toutput = $boutput = $error;
  }
  return array('body' => $boutput, 'teaser' => $toutput);
}


/**
 * Recursive function goes through node object
 *
 * @param $array
 *   array to recurse through
 * @param $target
 *   target field for javascript insert
 * @param $parents
 *   used by recursion
 * @param $object
 *   used by recursion
 * @return unknown
 */
function contemplate_array_variables($array, $target, $parents = FALSE, $object = FALSE){
  if(is_object($array)){
    $array = (array)$array;
  }
  if(is_array($array)){
    $output .= "<dl>\n";
    foreach($array as $field => $value){
      if($parents){
        if($object){
          $field = $parents .'->'.$field;
        }
        else {
          if(is_int($field)){
            $field = $parents .'['. $field .']';
          }
          else {
            $field = $parents .'[\''. $field .'\']';
          }
        }
      }
      
      $type = "";
      if(!is_string($value)){
        $type = " (". gettype($value) .")";
      }
      
      if(!is_array($value) && !is_object($value)){
        $output .= "<dt><a href=\"#\" onclick=\"insertAtCursor(document.getElementById('edit-$target'), '<?php print \$". addslashes($field) ." ?>');return false;\" title=\"insert this variable into $target\">\$$field</a>$type</dt>\n";
      }
      else {
        $output .= "<dt>\$$field$type</dt>\n";
      }
      
      $output .= "<dd>\n";
      if(is_array($value)){
        $output .= contemplate_array_variables($value, $target, $field);
      }
      elseif(is_object($value)){
        $output .= contemplate_array_variables((array)$value, $target, $field, TRUE);
      }
      else {
        $value = is_bool($value) ? ($value ? 'TRUE' : 'FALSE') : $value;
        $output .= htmlspecialchars(print_r($value, TRUE)) ."\n";
      }
      $output .= "</dd>\n";
    }
    $output .= "</dl>\n";
  }
  return $output;
}

/**
 * Run example node through view hooks to present the node object parts
 * - used only on the template editing pages
 */
function contemplate_node_view($node, $teaser = FALSE, $page = FALSE, $links = TRUE){
  //first create a global variable to switch off contemplate_nodeapi('view', ...
  global $contemplate_kill_view;
  $contemplate_kill_view = TRUE;
  
  if (node_hook($node, 'view')) { 
   node_invoke($node, 'view', $teaser, $page); 
  } 
  else { 
    $node = node_prepare($node, $teaser); 
  } 
  // Allow modules to change $node->body before viewing. 
  node_invoke_nodeapi($node, 'view', $teaser, $page); 
  if ($links) { 
    $node->links = module_invoke_all('link', 'node', $node, !$page); 
  }
  $contemplate_kill_view = FALSE;
  
  // unset unused $node part so that a bad theme can not open a security hole 
  if ($teaser) { 
    unset($node->body); 
  } 
  else { 
    unset($node->teaser); 
  }
  return $node;
}


/**
 * Copy of drupal_eval(), but extracts the node object so that variables are available to the template
 *
 * @param $tmplt
 *   the template code
 * @param $obj
 *   an object to extract into the local variables
 * @return
 *   executed template code
 */
function contemplate_eval($tmplt, $obj){
  extract((array)$obj);
  ob_start(); 
  print eval('?>'. $tmplt); 
  $output = ob_get_contents(); 
  ob_end_clean(); 
  return $output; 
}


function contemplate_cck_get_fields($type_name){
  if(module_exist('content')){
    $return = array();
    
    // for compatibility with both CVS and 4.7 versions of CCK
    // remove conditionals once "content_types()" is committed to 4.7
    
    // start remove
    if(function_exists('content_types')){
      $type = content_types($type_name); //   <-- keep this part
    }
    else {
      $types = _content_types();
      $type = (array)$types[$type_name];
    }
    // end remove
    
    if($type){
      // if this is a CCK field
      foreach($type['fields'] as $field_name => $field){
        $return[] = theme('contemplate_field', $field);      
      }
      $return = implode("\n", $return);
    }
    else {
      $return = FALSE;
    }
  }
  else {
    $return = FALSE;
  }
  return $return;
}

/**
 * Rewrite of theme_field to output default CCK output into the template.
 *
 * @param unknown_type $node
 * @param unknown_type $field
 * @param unknown_type $items
 * @param unknown_type $teaser
 * @param unknown_type $page
 * @return unknown
 */
function theme_contemplate_field(&$field) {
  $output = '';

  $output .= '<div class="field field-type-'. strtr($field['type'], '_', '-') .' field-'. strtr($field['field_name'], '_', '-') .'">'."\n";

  $output .= '  <h3 class="field-label">'. $field['widget']['label'] .'</h3>'."\n";

  $output .= '  <div class="field-items">'."\n";
  $output .= "    <?php foreach ((array)\$". $field['field_name'] ." as \$item) { ?>"."\n";
  $output .= '      <div class="field-item">'. "<?php print \$item['view'] ?>" .'</div>'."\n";
  $output .= "    <?php } ?>"."\n";
  $output .= '  </div>'."\n";

  $output .= '</div>'."\n";

  return $output;
}

function contemplate_version(){
  return str_replace(array('$RCSf'.'ile:', ',v', '$Re'.'vision: ', '$Da'.'te: ', '$'), '', '<p style="font-size:x-small">$RCSfile: contemplate.module,v $ version: <b>$Revision: 1.5 $</b>, $Date: 2006/06/22 23:58:11 $</p>');
}