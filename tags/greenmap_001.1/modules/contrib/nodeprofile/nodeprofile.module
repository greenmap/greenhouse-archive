<?php
// $Id: nodeprofile.module,v 1.6 2006/08/09 08:18:22 fago Exp $

/**
 * @file
 * Marks content types as profiles
 */


/**
 * Implementation of hook_help().
 */
function nodeprofile_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Marks content types as profiles.');
  }
}

/**
 * Implementation of hook_menu().
 */
function nodeprofile_menu($may_cache) {
    
  if ($may_cache && module_exist('usernode') && module_exist('nodefamily')) {
    //prevent the deletion of the usernode-ct - nodeprofile-ct relation
    $items[] = array('path' => 'admin/settings/nodefamily/' . USERNODE_CONTENT_TYPE, 
        'title' => t('delete relation'),
        'callback' => 'nodeprofile_keep_relation',
        'access' => user_access('administer nodes'),
        'type' => MENU_CALLBACK);
    return $items;
  }
}

function nodeprofile_keep_relation() {

  if (is_nodeprofile(arg(4))) {
    drupal_set_message(t('You may not delete this relation manually. To remove it unmark the '.
                          'content type "%type" as nodeprofile.', 
                          array('%type' => node_get_name(arg(4)))), 'error');
    drupal_goto('admin/settings/nodefamily');
  }
  else {
    //proceed with deletion
    nodefamily_admin();  
  }  
}


/*
 * Determines if a given node is a nodeprofile
 * @param The node object or the node's type
 */
function is_nodeprofile($type) {
  if (is_object($type)) {
    $type = $type->type;
  }
  return variable_get('nodeprofile_'. $type, 0);
}

/*
 * Implementation of hook_form_alter().
 */
function nodeprofile_form_alter($form_id, &$form) { 

  if (isset($form['type']) && $form['type']['#value'] .'_node_settings' == $form_id &&
    ( !module_exist('usernode') || $form['type']['#value'] != USERNODE_CONTENT_TYPE )) {

    $form['nodeprofile'] = array('#type' => 'fieldset', '#title' => t('Nodeprofile'));
    $form['nodeprofile']['nodeprofile_'. $form['type']['#value']] = array(
      '#type' => 'checkbox',
      '#title' => t('Use this content type as a nodeprofile for users'),
      '#default_value' => variable_get('nodeprofile_'. $form['type']['#value'], 0),
      '#return_value' => 1,
    );
    $form['buttons']['#weight'] = 10;
    $form['#submit']['nodeprofile_node_settings_submit'] = array(variable_get('nodeprofile_'. $form['type']['#value'], 0));
    
    if (module_exist('usernode') && module_exist('nodefamily') && variable_get('nodeprofile_'. $form['type']['#value'], 0)) {
      $form['nodefamily']['nodefamily_'. $form['type']['#value']. '_max']['#attributes'] = array('disabled' => 'disabled');
    }
  }
}

function nodeprofile_node_settings_submit($form_id, &$form_values, $old_value) {
  $type = $form_values['type'];
  if (!$old_value && $form_values['nodeprofile_'. $type ]) {
    //activated
    if (module_exist('usernode') && module_exist('nodefamily')) {
      nodefamily_ct_relation_add(USERNODE_CONTENT_TYPE, $type);
      nodefamily_content_type_set_max($type, 1);
    }
  }
  else if ($old_value && !$form_values['nodeprofile_'. $type ]) {
    //deactivated
    if (module_exist('usernode') && module_exist('nodefamily')) {
      nodefamily_ct_relation_remove(USERNODE_CONTENT_TYPE, $type);
    }
  }
}
