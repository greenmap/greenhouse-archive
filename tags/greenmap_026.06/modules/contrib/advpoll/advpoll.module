<?php
// $Id: advpoll.module,v 1.8.2.10 2007/12/08 20:15:30 chriskennedy Exp $
/**
 * @file
 * Advanced Poll - a sophisticated polling module for voting, elections, and group decision-making.
 */


define('ADVPOLL_DEFAULT_ELECTORAL_LIST', 0);
// always, aftervote, or afterclose
define('ADVPOLL_DEFAULT_VIEW_RESULTS', 'aftervote');

/**
 * Implementation of hook_access().
 */
function advpoll_access($op, $node) {
  global $user;

  if ($op == 'create') {
    return user_access('create polls');
  }
  if ($op == 'delete') {
    return user_access('delete polls');
  }
  if ($op == 'update') {
    if (user_access('create polls') && ($user->uid == $node->uid)) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_block().
 */
function advpoll_block($op = 'list', $delta = 'mostrecent', $edit = array()) {
  switch($op) {
    case 'list':
      $blocks['mostrecent']['info'] = t('Advanced Poll - Newest');
      return $blocks;
    case 'view':
  		if (user_access('view polls')) {
				switch ($delta) {
					case 'mostrecent': default:
      			$block['content'] = advpoll_block_mostrecent();
      			$block['subject'] = t('Advanced Poll - Newest');
				}

				if ($block['content']) {
      		return $block;
				}
			}
		default:
      return array();
  }
}

/**
 * Content of the block, as returned by advpoll_block('view')
 */
function advpoll_block_mostrecent() {
  $output = '';
	$result = db_query('SELECT nid FROM {advpoll} WHERE active=1 ORDER BY nid DESC LIMIT 1');
	// Check that there is an active poll
	if (db_num_rows($result) > 0) {
  	$poll = db_fetch_object($result);
    $node = node_load($poll->nid);
		advpoll_view($node, false, false, true);
    $output = $node->body;
	}
	else {
		$output .= t('No active Advanced poll.');
	}
  return $output;
}

/**
 * Implementation of VotingAPI's hook_calculate
 * Recalculate results whenever a vote is added or removed
 */
function advpoll_votingapi_calculate(&$results, $votes, $content_type, $content_id) {
	// Make sure it's an Advanced Poll content type
	if ($content_type == 'advpoll') {
		$node = node_load($content_id);
		$mode = _advpoll_get_mode($node);
		$function = 'advpoll_calculate_results_' . $mode;
		if (function_exists($function)) {
			$function($results, $votes, $node);
		}
		cache_clear_all();
	}
}


/**
 * Implementation of hook_cron().
 *
 * Closes polls that have exceeded their allowed runtime.
 */
function advpoll_cron() {
  $result = db_query('SELECT d.nid FROM {advpoll} d INNER JOIN {node} n ON d.nid = n.nid WHERE (n.created + d.runtime) < '. time() .' AND d.active = 1 AND d.runtime != 0');
  while ($poll = db_fetch_object($result)) {
    db_query("UPDATE {advpoll} SET active = 0 WHERE nid=%d", $poll->nid);
  }
}


/**
 * Implementation of hook_delete().
 *
 */
function advpoll_delete($node) {
  db_query("DELETE FROM {advpoll} WHERE nid = %d", $node->nid);
  db_query("DELETE FROM {advpoll_choices} WHERE nid = %d", $node->nid);
  db_query("DELETE FROM {advpoll_electoral_list} WHERE nid = %d", $node->nid);

	// Note: this should be converted to a votingapi method eventually
	db_query("DELETE FROM {votingapi_vote} WHERE content_id = %d", $node->nid);
}

/**
 * Implementation of hook_form().
 *
 * This hook displays the form necessary to create/edit the poll.
 */
function advpoll_form($node) {
	$mode = _advpoll_get_mode($node);

	if (function_exists('_drupal_add_js')) {
		$jQuery = TRUE;
		// Using 5.0 or 4.7 with the jQuery patch
		drupal_add_js("$(document).ready(function(){
		var add_choice = document.createElement('input');
		add_choice.id = 'addChoice';
		add_choice.type = 'button';
		add_choice.value = '" . t('Add choice') . "';
		$('#morechoices').append(add_choice);
		$('#addChoice').fadeIn(1000);
		$('#addChoice').bind('click', function () {
			var nextChoice = $('input.choices').length + 1;
			var div = document.createElement('div');
			div.className = 'form-item choiceDiv';

			var label = document.createElement('label');
			label.htmlFor = 'edit-choice-' + nextChoice + '-label';
			label.appendChild(document.createTextNode('"
				// Hack for translating string before we know the specific number
				. t('Choice %n', array('%n' => -1)) . ": '.replace('-1', nextChoice)));

			div.appendChild(label);

			var input = document.createElement('input');
			input.type = 'text';
			input.maxlength = 128;
			input.name = 'edit[choice][' + nextChoice + '][label]';
			input.id = 'edit-choice-' + nextChoice + '-label';
			input.size = 60;
			input.className = 'form-text choices';

			div.appendChild(input);

			$('.choices:last').after(div);
			$('.choiceDiv:last').fadeIn(1000);
			$('#edit-choices').each(function(){this.value=nextChoice});
		});
	});", 'inline');

	}

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => ucfirst($mode) . ' ' . t('Question'),
    '#required' => TRUE,
    '#default_value' => $node->title,
  );

  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#required' => FALSE,
    '#default_value' => $node->body,
  );

 $form['choice']['choices'] = array(
    '#type' => 'hidden',
    '#default_value' => max(2, count($node->choice) ? count($node->choice) : 5)
  );
  
  $form['choice']['morechoices'] = array(
    '#type' => 'checkbox',
    '#title' => t('Need more choices'),
    '#default_value' => 0,
		'#prefix' => '<div id="morechoices">',
		'#suffix' => '</div>',
    '#description' => t("If the amount of boxes above isn't enough, check this box and click the Preview button below to add some more."),
    '#weight' => 1
  );

  $form['choice'] = form_builder($node->type . '_node_form', $form['choice']);
  
  if ($form['choice']['morechoices']['#value']) {
    $form['choice']['morechoices']['#value'] = 0;
    $form['choice']['choices']['#value'] *= 2;
  }

  // If the value was changed in a previous iteration, retain it.
  $node->choices = $form['choice']['choices']['#value'];

  // Advanced Poll choices
  $form['choice'] += array(
    '#type' => 'fieldset',
    '#title' => t('Poll choices'),
    '#collapsible' => TRUE,
    '#prefix' => '<div class="poll-form">',
    '#suffix' => '</div>',
		'#tree' => TRUE,
    '#weight' => 1,
  );
    
  for ($a = 1; $a <= $node->choices; $a++) {
    $form['choice'][$a]['label'] = array(
      '#type' => 'textfield',
      '#title' => t('Choice %n', array('%n' => $a)),
      '#default_value' => $node->choice[$a]['label'],
			'#attributes' => array('class' => 'choices'),
    );
  }

	$form['settings'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Poll settings'),
    '#collapsible' => TRUE,
		'#weight' => 2,
  );

	$maxChoiceList = array();
	for ($i = 0; $i <= $node->choices; $i++) {
		$maxChoiceList[$i] = ($i == 0? 'No limit' : $i);
	}

  $form['settings']['maxchoices'] = array(
		'#type' => 'select',
		'#title' => t('Maximum Choices'),
		'#default_value' => (isset($node->maxchoices)? $node->maxchoices : 0),
		'#options' => $maxChoiceList,
		'#description' => t('Limits the total number of choices voters may select.')
	);

	$voting_algorithms = array();
	if ($mode == 'ranking') {
		$algs = array('instant runoff', 'borda count');
	}
	else {
		// mode == poll
		$algs = array('plurality');
	}

	foreach ($algs as $alg) {
		$voting_algorithms[$alg] = ucwords($alg);
	}

	$defaultalg = ($_POST['edit']['settings']['algorithm']?
		$_POST['edit']['settings']['algorithm'] : 
			$node->algorithm);
			

	$form['settings']['algorithm'] = array(
		'#type' => 'select',
		'#title' => t('Algorithm'),
		'#options' => $voting_algorithms,
		'#default_value' => $defaultalg,
		'#description' => 'Voting algorithm to use to calculate the winner.',
	);

	$active = array(1 => t('Active'), 0 => t('Closed'));
	$form['settings']['active'] = array(
		'#type' => 'radios',
		'#title' => t('Poll Status'),
		'#options' => $active,
		'#default_value' => (isset($node->active)? $node->active : 1),
		'#description' => t('When a poll is closed users may no longer vote on it.'),
	);

  $_duration = array(0 => t('Unlimited')) + drupal_map_assoc(array(86400, 172800, 345600, 604800, 1209600, 2419200, 4838400, 9676800, 31536000), 'format_interval');

  $form['settings']['runtime'] = array(
		'#type' => 'select',
		'#title' => t('Poll duration'),
		'#default_value' => (isset($node->runtime)? $node->runtime : 0),
		'#options' => $_duration,
		'#description' => t('After this period, the poll will be closed automatically.')
	);


	$form['settings']['uselist'] = array(
		'#type' => 'checkbox',
		'#title' => t('Restrict voting to electoral list'),
		'#description' => t('If enabled, a list of eligible voters will be created and only that group will be able to vote in the poll.'),
		'#default_value' => isset($node->uselist)? $node->uselist : variable_get('advpoll_default_electoral_list', ADVPOLL_DEFAULT_ELECTORAL_LIST),
	);

	$form['settings']['showvotes'] = array(
		'#type' => 'checkbox',
		'#title' => t('Show individual votes'),
		'#description' => t('Users with the appropriate permissions will be able to see how each person voted.'),
		'#default_value' => isset($node->showvotes)? $node->showvotes : 1,
	);

	if (user_access('administer advanced poll')) {
		$form['settings']['reset'] = array(
			'#type' => 'button',
			'#value' => t('Reset votes'),
		);
	}
  
	$form['format'] = filter_form($node->form);
	return $form;
}


/**
 * Implementation of hook_help().
 */
function advpoll_help($section) {

	$desc = advpoll_node_info();
  switch ($section) {
    case 'admin/modules#description':
      return t('A sophisticated polling module for voting, elections, and group decision-making.');
    case 'node/add#advpoll-binary':
      return $desc['advpoll-binary']['description'];
    case 'node/add#advpoll-ranking':
      return $desc['advpoll-ranking']['description'];
  }
}

/**
 * Implementation of hook_load().
 *
 * Load the votes and poll-specific data into the node object.
 */
function advpoll_load($node) {
	global $user;
  $poll = db_fetch_object(db_query("SELECT * FROM {advpoll} WHERE nid = %d", $node->nid));
  $result = db_query("SELECT vote_offset, label FROM {advpoll_choices} WHERE nid = %d ORDER BY vote_offset", $node->nid);
  while ($choice = db_fetch_array($result)) {
  	$poll->choice[$choice['vote_offset']] = $choice;
  }
  $poll->choices = count($poll->choice);

	$poll->voted = FALSE;
	$poll->cancel_vote = FALSE;

	// See if user has voted
	if ($user->uid) {
		$poll->voted = (count(votingapi_get_user_votes('advpoll', $node->nid)) > 0);
		if ($poll->voted) {
			$poll->cancel_vote = TRUE;
		}
	}
	else {
		$result = db_query("SELECT uid, value FROM {votingapi_vote} "
			. "WHERE content_id=%d AND hostname='%s'",
			$node->nid, $_SERVER['REMOTE_ADDR']);
		if (db_num_rows($result) > 0) {
			$poll->voted = TRUE;
			$obj = db_fetch_object($result);
			if ($obj->uid == 0) {
				// Only allow cancelling if initial vote was also anonymous
				$poll->cancel_vote = TRUE;
			}
		}
	}

  return $poll;
}

/**
 * Implementation of hook_menu().
 *
 */
function advpoll_menu($may_cache) {
  global $user;

  // load the necessary submodules in here instead of _init() to
  // profit from caching, as recommended by
  // http://drupaldocs.org/api/head/function/hook_init
  _advpoll_load_modes();

  $items = array();

  if ($may_cache) {
    $items[] = array(
			'path' => 'node/add/advpoll-ranking',
			'title' => t('advpoll-ranking'),
      'access' => user_access('create polls'),
		);

    $items[] = array(
			'path' => 'node/add/advpoll-binary',
			'title' => t('advpoll-binary'),
      'access' => user_access('create polls'),
		);

		$items[] = array(
			'path' => 'advpoll/cancel',
			'title' => t('Cancel'),
			'callback' => 'advpoll_cancel',
			'access' => user_access('cancel own vote'),
			'type' => MENU_CALLBACK
		);
		
  }
	else {
		// need to be able to extract the nid
		if (arg(0) == 'node' && is_numeric(arg(1))) {
			$nid = arg(1);
			$node = node_load($nid);
			// Make sure we're on the actual poll node's page
			if (strstr($node->type, 'advpoll-') == 0) {
				// Show the results tab
				if ($node->active && !$node->voted
					&& _advpoll_can_view_results($node)) {
					$items[] = array('path' => 'node/' . $nid . '/results',
						'title' => t('results'),
						'callback' => 'advpoll_results',
						'access' => user_access('view polls'),
						'weight' => 3,
						'type' => MENU_LOCAL_TASK,
					);
				}

				// Show the votes tab
				if ($node->showvotes) {
					$items[] = array(
						'path' => 'node/' . $nid . '/votes',
						'title' => t('votes'),
						'callback' => 'advpoll_tab_votes',
						'access' => user_access('inspect all votes'),
						'weight' => 3,
						'type' => MENU_LOCAL_TASK,
					);
				}

				// Show electoral list tab if using the functionality
				if ($node->uselist) {
					$items[] = array(
						'path' => 'node/' . $nid . '/electoral_list',
						'title' => t('electoral list'),
						'callback' => 'advpoll_tab_electoral_list',
						'access' => user_access('view polls'),
						'weight' => 3,
						'type' => MENU_LOCAL_TASK,
					);

					// Allow voters to be removed
					$items[] = array(
						'path' => 'node/' . $nid . '/remove',
						'callback' => 'advpoll_remove_voter',
						'access' => user_access('administer advanced poll'),
						'weight' => 3,
						'type' => MENU_CALLBACK,
					);
				}

				// Allow votes to be reset
				$items[] = array(
					'path' => 'node/' . $nid . '/reset',
					'callback' => 'advpoll_reset_confirm',
					'access' => user_access('administer advanced poll'),
					'weight' => 3,
					'type' => MENU_CALLBACK,
				);

			
			}
		}
	}

  return $items;
}

/**
 * Display the electoral list tab
 */
function advpoll_tab_electoral_list() {
	if ($node = node_load(arg(1))) {
		if (!$node->uselist) {
			drupal_not_found();
			return;
		}
		drupal_set_title(check_plain($node->title));
		
		if (user_access('administer advanced poll')) {
			$form['electoral_list'] = array(
    		'#type' => 'fieldset',
    		'#tree' => TRUE,
    		'#title' => t('Administer electoral list'),
    		'#collapsible' => TRUE,
				'#weight' => 2,
				'#collapsed' => TRUE,
  		);

			$form['electoral_list']['add_user'] = array(
				'#type' => 'textfield',
				'#title' => t('Add user'),
				'#size' => 40,
				'#autocomplete_path' => 'user/autocomplete',
				'#description' => t('Add an individual user to the electoral list'),
			);

  		$form['electoral_list']['submit'] = array(
				'#type' => 'submit',
				'#value' => t('Modify electoral list'),
			);

			$form['electoral_list']['reset'] = array(
				'#type' => 'button',
				'#value' => t('Reset electoral list'),
			);

			$form['nid'] = array('#type' => 'hidden', '#value' => $node->nid);
			$output .= drupal_get_form('advpoll_electoral_list', $form);
		}

  	$output .= '<p>'
			. t('This table lists all the eligible voters for this poll.')
			. '</p>';

    $header[] = array('data' => t('Voter'), 'field' => 'u.name');

    $result = pager_query("SELECT u.uid, u.name FROM {advpoll_electoral_list} el LEFT JOIN {users} u ON el.uid = u.uid WHERE el.nid = %d" . tablesort_sql($header), 20, 0, NULL, $node->nid);
    $eligible_voters = array();
    while ($voter = db_fetch_object($result)) {
			$temp = array(
				theme('username', $voter),
			);

			if (user_access('administer advanced poll')) {
				$temp[] = l(t('remove'), 'node/'. $node->nid .'/remove/' . $voter->uid);
			}

			$eligible_voters[] = $temp;
    }
    $output .= theme('table', $header, $eligible_voters);
    $output .= theme('pager', NULL, 20, 0);
    print theme('page', $output);
	}
	else {
		drupal_not_found();
	}
}

/**
 * Remove an individual voter from the electoral list
 */
function advpoll_remove_voter() {
	$nid = arg(1);
	$uid = arg(3);
	if ($uid && $node = node_load($nid)) {
		$result = db_query('SELECT name FROM {users} WHERE uid=%d', $uid);
		if (db_num_rows($result) > 0) {
			$user = db_fetch_object($result);
			db_query('DELETE FROM {advpoll_electoral_list} WHERE nid=%d AND uid=%d',
				$nid, $uid);
			drupal_set_message(t('%user removed from the electoral list.', array('%user' => $user->name)));
		}
		else {
			drupal_set_message(t('No user found with a uid of %uid.', array('%uid' => $uid)));
		}

	}
	drupal_goto('node/' . $node->nid . '/electoral_list');
}

/**
 * Validate changes to the electoral list
 */
function advpoll_electoral_list_validate($form_id, $form_values) {
	if ($_POST['op'] == t('Reset electoral list')) {
		if (user_access('administer advanced poll')) {
			db_query('DELETE FROM {advpoll_electoral_list} WHERE nid=%d', $form_values['nid']);
			drupal_set_message(t('Electoral list cleared.'));
			return;
		}
	}

	$add_user = $form_values['electoral_list']['add_user'];
	if ($add_user) {
		// Check that the user exists
		$result = db_query('SELECT uid FROM {users} WHERE name="%s"', $add_user);
		if (db_num_rows($result) == 0) {
			form_set_error('electoral_list][add_user', t('User %user does not exist.', array('%user' => $add_user)));
			return FALSE;
		}
	}
}

/**
 * Submit changes to the electoral list
 */
function advpoll_electoral_list_submit($form_id, $form_values) {
	$add_user = $form_values['electoral_list']['add_user'];
	if ($add_user) {
		db_query('REPLACE INTO {advpoll_electoral_list} (nid, uid) SELECT "%d", u.uid FROM users u WHERE u.name = "%s"', $form_values['nid'], $add_user);
		drupal_set_message(t('%user added to electoral list.', array('%user' => $add_user)));
	}
}

/**
 * Display the votes tab
 */
function advpoll_tab_votes() {
	if ($node = node_load(arg(1))) {
		if (!$node->showvotes) {
			// Advanced Poll is set to not allow viewing of votes
			drupal_not_found();
			return;
		}
		drupal_set_title(check_plain($node->title));
  	$output = t('This table lists all the recorded votes for this poll. If anonymous users are allowed to vote, they will be identified by the IP address of the computer they used when they voted.');

    $header[] = array('data' => t('Visitor'), 'field' => 'u.name');
    $header[] = array('data' => t('Vote'), '');

    $result = pager_query('SELECT v.value, v.uid, v.hostname, v.tag, u.name FROM {votingapi_vote} v LEFT JOIN {users} u ON v.uid = u.uid WHERE v.content_id = %d' . tablesort_sql($header), 20, 0, NULL, $node->nid);
    $rows = array();
    while ($vote = db_fetch_object($result)) {
			$key = $vote->uid? $vote->uid : $vote->hostname;
			$rows[$key]['name'] = $vote->name ? theme('username', $vote) : check_plain($vote->hostname);
			if ($node->type == 'advpoll-ranking') {
				// Need two dimensional results (if equal rankings are allowed)
      	$rows[$key]['votes'][$vote->value][] = check_plain($node->choice[$vote->tag]['label']);
			}
			else {
				// Just need one dimensional results
      	$rows[$key]['votes'][] = check_plain($node->choice[$vote->tag]['label']);
			}
    }
		
		$separators = array('advpoll-ranking' => ' > ', 'advpoll-binary' => ', ');

		// create strings out of each vote
		$results = array();

		foreach ($rows as $key => $container) {
			$ranking = $container['votes'];
			asort($ranking);
			$rankings = array();
			if ($node->type == 'advpoll-ranking') {
				// Include support for multiple choices having the same ranking
				foreach ($ranking as $vote => $choices) {
					$rankings[$vote] = implode(' = ', $choices);
				}
			}
			else {
				// Just copy the previous array
				$rankings = $ranking;
			}
			ksort($rankings);
			$results[$key]['name'] = $rows[$key]['name'];
			$results[$key]['vote'] = implode($separators[$node->type], $rankings);
		}

    $output .= theme('table', $header, $results);
    $output .= theme('pager', NULL, 20, 0);
    print theme('page', $output);
	}
	else {
		drupal_not_found();
	}
}


/**
 * Helper function to abstract view results checking
 */
function _advpoll_can_view_results($node) {
	$view_results = variable_get('advpoll_view_results'
		, ADVPOLL_DEFAULT_VIEW_RESULTS);
	return (!$node->active  // node is closed
				|| ($node->voted && $view_results == 'aftervote') // user voted
				|| ($view_results == 'always')); // all can view
}

/**
 * Implementation of hook_node_info().
 */
function advpoll_node_info() {
  return array(
		'advpoll-ranking' => array(
			'name' => t('Advanced poll - ranking'),
			'module' => 'advpoll',
			'base' => 'advpoll',   // 4.7 legacy
      'description' => t('Rank a number of choices.'),
		),
		'advpoll-binary' => array(
			'name' => t('Advanced poll - binary'),
			'module' => 'advpoll',
			'base' => 'advpoll',   // 4.7 legacy
      'description' => t('Vote for or against a number of choices.'),
		),
	);
}

/**
 * Implementation of hook_perm().
 */
function advpoll_perm() {
  return array('create polls', 'delete polls', 'view polls', 'vote on polls', 'cancel own vote', 'administer advanced poll', 'inspect all votes');
}

/**
 * Implementation of hook_settings() for 4.7.
 */
function advpoll_settings() {
	$enabled = array(0 => t('Disabled'), 1 => t('Enabled'));

	$form['main']['advpoll_default_electoral_list'] = array(
		'#type' => 'radios',
		'#title' => t('Use electoral list by default'),
		'#description' => t('Use an electoral list by default for new advpoll.'),
		'#default_value' => variable_get('advpoll_default_electoral_list', ADVPOLL_DEFAULT_ELECTORAL_LIST),
		'#options' => $enabled,
	);

	$view_results = array(
		'always' => t('Always'),
		'aftervote' => t('After user has voted'),
		'afterclose' => t('After voting has closed'),
	);

	$form['main']['advpoll_view_results'] = array(
		'#type' => 'radios',
		'#title' => t('When should results be displayed'),
		'#description' => t('Determines when users may view the results of the poll.'),
		'#default_value' => variable_get('advpoll_view_results', ADVPOLL_DEFAULT_VIEW_RESULTS),
		'#options' => $view_results,
	);
	return $form;
}


/**
 * Helper function to display 'cancel vote' button if user has voted
 */
function advpoll_cancel_form($nid) {
  $form['#action'] = url("advpoll/cancel/$nid");
  $form['submit'] = array('#type' => 'submit', '#value' => t('Cancel your vote'));
  return $form;	
}

/**
 * Implementation of hook_update().
 *
 * This is called upon node edition.
 */
function advpoll_update($node) {
  db_query("UPDATE {advpoll} SET active=%d, runtime=%d, maxchoices=%d, algorithm='%s', uselist=%d, showvotes=%d WHERE nid = %d", $node->settings['active'], $node->settings['runtime'], $node->settings['maxchoices'], $node->settings['algorithm'], $node->settings['uselist'], $node->settings['showvotes'], $node->nid);
  // XXX: should update advpoll here, when it has some parameters
  // XXX: ... but before doing so, the code below must be factored out in a seperate function for usage in advpoll_insert()
  db_query('DELETE FROM {advpoll_choices} WHERE nid = %d', $node->nid);

	// Start at one rather than 0 due to Drupal FormAPI
	$i = 1;
  foreach ($node->choice as $choice) {
  	 if ($choice['label'] != '') {
      db_query("INSERT INTO {advpoll_choices} (nid, label, vote_offset) VALUES (%d, '%s', %d)", $node->nid, $choice['label'], $i++);
    }
  }
	votingapi_recalculate_results('advpoll', $node->nid);
}

function _advpoll_get_mode($node) {
	if ($node->type) {
		$types = explode('-', $node->type, 2);
		return $types[1];
	}
	else {
		drupal_set_message('No type specified for node: ' . $node->nid, 'error');
		return '';
	}
}

/**
 * Implementation of hook_insert()
 *
 * This is called upon node creation
 */
function advpoll_insert($node) {
	$mode = _advpoll_get_mode($node);
	if ($mode == 'poll') {
		$alg = 'poll';
	} else if ($mode == 'ranking') {
		$alg = 'runoff';
	}
  db_query("INSERT INTO {advpoll} (nid, mode, uselist, active, runtime, maxchoices, algorithm) VALUES (%d, '%s', %d, %d, %d, %d, '%s')", $node->nid, $mode, $node->settings['uselist'], $node->settings['active'], $node->settings['runtime'], $node->settings['maxchoices'], $alg);

  // create the electoral list if desired

	if ($node->settings['uselist']) {
  	// Check if authenticated users have the right to vote, because authenticated users are not added to the users_roles permission, probably for performance reasons
  	$result = db_fetch_object(db_query("SELECT COUNT(*) AS hit FROM {permission} JOIN role ON role.rid = permission.rid WHERE FIND_IN_SET(' vote on advpoll', perm) AND role.name = 'authenticated user'"));
  	if ($result->hit) {
    	// Special case: any authenticated user can vote
    	// Add all current users to electoral list
    	db_query("INSERT INTO {advpoll_electoral_list} (nid, uid) SELECT '%d', u.uid FROM users u WHERE u.uid != 0", $node->nid);
  	}
  	else {
			// All users must not be allowed to vote, add relevant users only
    	db_query("INSERT INTO {advpoll_electoral_list} (nid, uid) SELECT '%d', u.uid FROM users_roles u, permission p WHERE FIND_IN_SET(' view advpoll', p.perm) AND u.rid = p.rid AND u.uid != 0", $node->nid);
  	}
	}

  // Insert the choices
  advpoll_update($node);
}

/**
 * Callback to display a reset votes confirmation form
 */ 
function advpoll_reset_confirm() {
	$edit = $_POST['edit'];
	$edit['nid'] = $edit['nid']? $edit['nid'] : arg(1);
	$node = node_load($edit['nid']);

	$form['nid'] = array('#type' => 'value', '#value' => $node->nid);
	$output = confirm_form('advpoll_reset_confirm', $form,
		t('Are you sure you want to reset the votes for %title?',
		array('%title' => theme('placeholder', $node->title))),
		'node/' . $node->nid . '/edit',
		t('This action cannot be undone.'),
		t('Reset votes'),
		t('Cancel') );
	return $output;
}

/**
 * Reset votes once the confirmation is given
 */
function advpoll_reset_confirm_submit($form_id, $form_values) {
	if ($form_values['confirm']) {
  	if ($node = node_load(array('nid' => arg(1)))) {
			// Delete any votes for the poll
			db_query("DELETE FROM {votingapi_vote} WHERE content_id = %d", $node->nid);
			drupal_set_message('Votes have been reset.');
			drupal_goto('node/' . $node->nid . '/edit');
		}
	}

	return '';
}

/**
 * Implementation of hook_validate().
 */
function advpoll_validate(&$node) {
	if ($_POST['op'] == t('Reset votes')) {
		drupal_goto('node/' . $node->nid . '/reset');
	}
	else {
  	// Use form_set_error for any errors
		$node->choice = array_values($node->choice);

		// Start keys at 1 rather than 0
		array_unshift($node->choice, '');
		unset($node->choice[0]);

		// Check for at least two choices
		$realchoices = 0;
		foreach ($node->choice as $i => $choice) {
			if ($choice['label'] != '') {
				$realchoices++;
			}
		}

		if ($realchoices < 2) {
			form_set_error("choice][$realchoices][label", t('You must fill in at least two choices.'));
		}
	}
}

function advpoll_submit(&$node) {
	$node->choice = array_values($node->choice);
	// Start keys at 1 rather than 0
	array_unshift($node->choice, '');
	unset($node->choice[0]);
}

/**
 * Implementation of hook_view().
 */
function advpoll_view(&$node, $teaser = FALSE, $page = FALSE, $block = FALSE) {
	if (!$block) {
  	$node = node_prepare($node, $teaser);
	}
	$mode = _advpoll_get_mode($node);

	// Record the vote if they voted
  $valid = FALSE;
  if ($_POST['op'] == t('Vote')) {
    // poll_vote will return FALSE on error
    $valid = advpoll_vote_validate($node);
    if ($valid) {
      advpoll_vote($node);
      drupal_set_message(t('Your vote was registered.'));
			// Transferring makes the results tab display correctly
    }
		drupal_goto('node/' . $node->nid);
  }

	// Previewing a node, so don't show results
	if ($node->in_preview) {
		// Show the voting form but don't let them vote
    $output .= advpoll_view_voting($node, $teaser, $page, $block);
	}
  else if (!$node->voted && arg(2) != 'results' && $node->active && advpoll_eligible($node)) {
		// User hasn't voted and we're not on the results tab
		if (!$valid) {
      $output .= advpoll_view_voting($node, $teaser, $page, $block);
  		$output .= advpoll_view_electoral_list($node, $teaser);
    }
	}
	else if (_advpoll_can_view_results($node)) {
		// Show results only if the user has voted or poll is closed
    $output .= advpoll_view_results($node, $teaser, $page, $block);
  	$output .= advpoll_view_electoral_list($node, $teaser);
	}

	if (isset($node->voted) && $node->cancel_vote && user_access('cancel own vote') && $node->active && !$block) {
			$output .= drupal_get_form('advpoll_cancel', advpoll_cancel_form($node->nid));
  }

	if ($block) {
		$output = '<div class="title">' . $node->title . '</div>' . $output;
		$output .= l(t('view poll'), 'node/' . $node->nid);
	}

  $node->teaser .= $output;
  $node->body .= $output;
}

function advpoll_view_electoral_list($node, $teaser = FALSE) {
  $output = '';
	if ($node->uselist) {
   	$result = db_query("SELECT COUNT(*) AS voters FROM {advpoll_electoral_list} WHERE nid=%d", $node->nid);
   	$electoral_list = db_fetch_object($result);
	}
  switch($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $result = db_query("SELECT COUNT(DISTINCT CONCAT(uid, '-', hostname)) AS votes FROM {votingapi_vote} WHERE content_id=%d", $node->nid);
      break;
    case 'pgsql':
      $result = db_query("SELECT COUNT(DISTINCT uid||'-'||hostname) AS votes FROM {votingapi_vote} WHERE content_id=%d", $node->nid);
      break;
  }
  $votes = db_fetch_object($result);

  $output = '<div class="advpoll-electoral-list">';

	$output .= t('Total votes: %d', array('%d' => $votes->votes));
	if ($node->uselist) {
   	$output .= t(' (out of %v eligible voter' . 
			($electoral_list->voters == 1? '' : 's') . ')',
				array('%v' => $electoral_list->voters));
	}
  $output .= '</div>';
  return $output;
}

/**
 * Render the voting form.
 */
function theme_advpoll_view_voting($form) {
$output .= '<style type="text/css">.postinfo, .links{display:none;}</style>';
  $output .= '<div class="advpoll">';
  $output .= '  <div class="choice-form">';
  $output .= '  <div id="marker-images">';

$output .= '  <div id="marker-image-1" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker1.jpg"><img border=0 id="marker-image-1" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker1.jpg"><div class="marker-number">#1</div></a></div>';

$output .= '  <div id="marker-image-2" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker2.jpg"><img border=0 id="marker-image-2" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker2.jpg"><div class="marker-number">#2</div></a></div>';

$output .= '  <div id="marker-image-3" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker3.jpg"><img border=0 id="marker-image-3" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker3.jpg"><div class="marker-number">#3</div></a></div>';

$output .= '  <div id="marker-image-4" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker4.jpg"><img border=0 id="marker-image-4" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker4.jpg"><div class="marker-number">#4</div></a></div>';

$output .= '  <div id="marker-image-5" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker5.jpg"><img border=0 id="marker-image-5" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker5.jpg"><div class="marker-number">#5</div></a></div>';

$output .= '  <div id="marker-image-6" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker6.jpg"><img border=0 id="marker-image-6" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker6.jpg"><div class="marker-number">#6</div></a></div>';

$output .= '  <div id="marker-image-7" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker7.jpg"><img border=0 id="marker-image-7" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker7.jpg"><div class="marker-number">#7</div></a></div>';

$output .= '  <div id="marker-image-8" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker8.jpg"><img border=0 id="marker-image-8" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker8.jpg"><div class="marker-number">#8</div></a></div>';

$output .= '  <div id="marker-image-9" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker9.jpg"><img border=0 id="marker-image-9" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker9.jpg"><div class="marker-number">#9</div></a></div>';

$output .= '  <div id="marker-image-10" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker10.jpg"><img border=0 id="marker-image-10" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker10.jpg"><div class="marker-number">#10</div></a></div>';

$output .= '  <div id="marker-image-11" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker11.jpg"><img border=0 id="marker-image-11" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker11.jpg"><div class="marker-number">#11</div></a></div>';

$output .= '  <div id="marker-image-12" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker12.jpg"><img border=0 id="marker-image-12" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker12.jpg"><div class="marker-number">#12</div></a></div>';

$output .= '  <div id="marker-image-13" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker13.jpg"><img border=0 id="marker-image-13" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker13.jpg"><div class="marker-number">#13</div></a></div>';

$output .= '  <div id="marker-image-14" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker14.jpg"><img border=0 id="marker-image-14" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker14.jpg"><div class="marker-number">#14</div></a></div>';

$output .= '  <div id="marker-image-15" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker15.jpg"><img border=0 id="marker-image-15" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker15.jpg"><div class="marker-number">#15</div></a></div>';

$output .= '  <div id="marker-image-16" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker16.jpg"><img border=0 id="marker-image-16" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker16.jpg"><div class="marker-number">#16</div></a></div>';

$output .= '  <div id="marker-image-17" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker17.jpg"><img border=0 id="marker-image-17" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker17.jpg"><div class="marker-number">#17</div></a></div>';

$output .= '  <div id="marker-image-18" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker18.jpg"><img border=0 id="marker-image-18" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker18.jpg"><div class="marker-number">#18</div></a></div>';

$output .= '  <div id="marker-image-19" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker19.jpg"><img border=0 id="marker-image-19" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker19.jpg"><div class="marker-number">#19</div></a></div>';

$output .= '  <div id="marker-image-20" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker20.jpg"><img border=0 id="marker-image-20" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker20.jpg"><div class="marker-number">#20</div></a></div>';

$output .= '  <div id="marker-image-21" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker21.jpg"><img border=0 id="marker-image-21" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker21.jpg"><div class="marker-number">#21</div></a></div>';

$output .= '  <div id="marker-image-22" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker22.jpg"><img border=0 id="marker-image-22" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker22.jpg"><div class="marker-number">#22</div></a></div>';

$output .= '  <div id="marker-image-23" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker23.jpg"><img border=0 id="marker-image-23" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker23.jpg"><div class="marker-number">#23</div></a></div>';

$output .= '  <div id="marker-image-24" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker24.jpg"><img border=0 id="marker-image-24" src="http://greenmap.org/greenhouse/files/markerdemo/testmarker24.jpg"><div class="marker-number">#24</div></a></div>';

$output .= '  <div id="marker-image-25" class="marker-image"><a href="http://greenmap.org/greenhouse/files/markerdemo/testmarker25.jpg"><img border=0 src="http://greenmap.org/greenhouse/files/markerdemo/testmarker25.jpg"><div class="marker-number">#25</div></a></div>';
  $output .= '  </div>';
  $output .= '    <div class="choices">';
  $output .= form_render($form['choice']);
  $output .= '    </div>';
  $output .= form_render($form['nid']);
  $output .= form_render($form['vote']);
  $output .= '  </div>';
  $output .= form_render($form);
  $output .= '</div>';
  return $output;
}

function theme_advpoll_bar($title, $percentage, $votes, $block) {
  if ($block) {
    $output  = '<div class="text">'. $title .'</div>';
    $output .= '<div class="bar"><div style="width: '. $percentage .'%;" class="foreground"></div></div>';
    $output .= '<div class="percent">'. $percentage .'%</div>';
  }
  else {
    $output  = '<div class="text">'. $title .'</div>';
    $output .= '<div class="bar"><div style="width: '. $percentage .'%;" class="foreground"></div></div>';
    $output .= '<div class="percent">'. $percentage .'% ('. $votes .')</div>';
  }
  return $output;
}

/**
 * View the voting form.
 *
 * This calls a function advpoll_vote_$mode, where $mode is defined
 * in the node. If the function does not exist, a watchdog error is
 * raised and the error is reported using drupal_set_message().
 *
 * This also takes care of registering new votes, if the vote button
 * has been pressed.
 */
function advpoll_view_voting(&$node, $teaser, $page, $block) {

	$mode = _advpoll_get_mode($node);
  if (function_exists("advpoll_view_voting_$mode")) {
    return call_user_func("advpoll_view_voting_$mode", $node, $teaser, $page, $block);
  }
  else {
    _advpoll_panic_on_mode($mode);
  }
}

/**
 * Callback for 'results' tab for advpoll you can vote on
 */
function advpoll_results() {
	if ($node = node_load(arg(1))) {
		drupal_set_title(check_plain($node->title));
		return node_show($node, 0);
	}
	else {
		// The url does not provide the appropriate node id
		drupal_not_found();
	}
}
/**
 * Show results of the vote
 *
 * this calls the appropriate vote results function, depending on the
 * mode. It will call advpoll_view_results_$mode, similarly to
 * advpoll_view_voting().
 */
function advpoll_view_results(&$node, $teaser, $page, $block) {
	$mode = _advpoll_get_mode($node);
  if (function_exists("advpoll_view_results_$mode")) {
    return call_user_func("advpoll_view_results_$mode", $node, $teaser, $page, $block);
  }
  else {
    _advpoll_panic_on_mode($mode);
  }
}

/**
 * Record a vote on the node
 *
 * this calls the appropriate vote recording function, depending on
 * the mode. It will call advpoll_vote_$mode, similarly to
 * advpoll_view_voting().
 */
function advpoll_vote($node) {
	$mode = _advpoll_get_mode($node);

  $ok = FALSE; // error by default
  if (advpoll_eligible($node)) {
    if (function_exists("advpoll_vote_$mode")) {
      call_user_func("advpoll_vote_$mode", $node);
    }
    else {
      _advpoll_panic_on_mode($mode);
    }
  }
  else {
    drupal_set_message(t('You are not eligible to vote on this poll.'));
  }
}

/**
 * Callback for canceling a vote
 */
function advpoll_cancel($nid) {
	global $user;
	$nid = arg(2);
  if ($node = node_load(array('nid' => $nid))) {
    if ($node->voted && $node->active) {
      if ($user->uid) {
				votingapi_unset_vote('advpoll', $node->nid, $user->uid);
      }
      else {
        db_query("DELETE FROM {votingapi_vote} WHERE content_id=%d and hostname = '%s' AND uid=0", $node->nid, $_SERVER['REMOTE_ADDR']);
				votingapi_recalculate_results('advpoll', $nid);
      }
      drupal_set_message(t('Your vote was canceled.'));
    }
    else {
      drupal_set_message(t("You are not allowed to cancel an invalid choice."), 'error');
    }
		drupal_goto('node/'. $nid);
 	}	
  else {
		drupal_not_found();
	}
}

/**
 * Validate vote form submission
 *
 * This will call a hook named advpoll_vote_validate_$mode and
 * return its value. hooks should check $POST to see if the vote data
 * submitted is valid and use form_set_error() if the form has invalid
 * data.
 *
 * @returns boolean true if form has valid data or if no hook is
 * defined in mode
 */
function advpoll_vote_validate($node) {
	$mode = _advpoll_get_mode($node);
  if (function_exists("advpoll_vote_validate_$mode") ) {
    return call_user_func("advpoll_vote_validate_$mode", $node);
  }
  return TRUE;
}

/**
 * Check if user is eligible to vote in this poll
 */
function advpoll_eligible($node, $uid = NULL) {
  global $user;
  if (!isset($uid)) {
    $uid = $user->uid;
  }

	if ($node->uselist) {
  	$can_vote = db_fetch_object(db_query("SELECT COUNT(*) AS eligible FROM {advpoll_electoral_list} WHERE nid=%d AND uid=%d", $node->nid, $uid));
	}
	else {
		return user_access('vote on polls');
	}
  return $can_vote->eligible;
}

/**
 * Debugging function for unknown mode.
 */
function _advpoll_panic_on_mode($mode) {
	watchdog('advpoll', t('Unknown poll mode : %mode.', array('%mode' => $mode), WATCHDOG_ERROR));
	drupal_set_message(t('Unknown poll mode : %mode.', array('%mode' => $mode), 'error'));
}

/**
 * Load the available modes.
 *
 * This scans the modes subdirectory to find mode.inc files, where
 * mode is considered to be the mode name. found files are loaded and
 * added to the mode list.
 *
 * @uses _advpoll_mode_list()
 * @uses file_scan_directory()
 */
function _advpoll_load_modes() {
  global $_advpoll_modes;

  foreach (file_scan_directory(dirname(__FILE__) . '/modes/', '^([^\.].*)\.inc$', array('.', '..', 'CVS'), 0, FALSE) as $file) {
		require_once($file->filename);
		$mode = $file->name;
		if (function_exists("advpoll_${mode}_longname") ) {
			_advpoll_mode_list($mode, call_user_func("advpoll_${mode}_longname"));
		}
		else {
			drupal_set_message("advpoll_${mode}_longname ??");
			_advpoll_mode_list($mode);
		}
  }
}

/**
 * List or set the known modes
 *
 * @param string $mode set/change the given mode
 * @param string $longname choiceal. set a longname different than the mode name
 *
 * @returns array the module list as a mode => longname associative array
 */
function _advpoll_mode_list($mode = NULL, $longname = NULL) {
  static $_advpoll_modes = array();

  if (!is_null($mode)) {
    if (is_null($longname)) {
      $longname = $mode;
    }
    $_advpoll_modes[$mode] = $longname;
  }
  return $_advpoll_modes;
}

