<?php
// $Id: userplus.module,v 1.1.2.5 2006/12/02 04:56:18 marcp Exp $

/**
 * @file
 * Enhances user administration by allowing operations on multiple
 * users at one time.
 */

/**
 * Implementation of hook_help().
 */
function userplus_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      // This description is shown in the listing at admin/modules.
      return t('User administration extension module.');
    case 'admin/user/userplus':
      return t('<p>This web page allows you to register new users and assign their roles. <strong>All users added this way automatically belong to the "authenticated user" role.</strong> Note that you cannot have a user where either the e-mail address or the username match another user in the system. Leave any surplus rows blank if you are only adding a few users.</p><p>It may take several runs through this page if you need to add a lot of users, however you can change the number of rows that appear on this page on the %settings page.</p>', array('%settings' => l('userplus settings', 'admin/settings/userplus')));
    case 'admin/user/userplus/userperms':
      return t('<p>This web page allows you to set role membership for all users at once.  You can change the number of rows that appear on this page on the %settings page.</p>', array('%settings' => l('userplus settings', 'admin/settings/userplus')));
    case 'admin/user/userplus/deletemultiple':
      return t('<p>This web page allows you to delete multiple users at one time.  You can change the number of rows that appear on this page on the %settings page.</p>', array('%settings' => l('userplus settings', 'admin/settings/userplus')));
    case 'admin/user/userplus/move_roles':
      if (!arg(4)) {
        return t('Choose a role you want to move users away from.  You will then be asked to select a destination role and you will also be able to choose which of the users to move to the destination role.');
      }
    case 'admin/user/userplus/config':
      return t('<p>This web page allows you to set configuration options for the "user +" module.</p>');
  }
}

/**
 * Implementation of hook_menu().
 */
function userplus_menu($may_cache) {
  $admin_access = user_access('administer users');
  
  $items = array();
  
  if ($may_cache) {
    $items[] = array('path' => 'admin/user/userplus',
                     'title' => t('user +'),
                     'callback' => 'userplus_add_users',
                     'access' => $admin_access,
                     'type' => MENU_LOCAL_TASK);
                     
    $items[] = array('path' => 'admin/user/userplus/addmultiple',
                     'title' => t('add multiple users'),
                     'access' => $admin_access,
                     'type' => MENU_DEFAULT_LOCAL_TASK,
                     'weight' => -2);
      
    $items[] = array('path' => 'admin/user/userplus/userperms',
                     'title' => t('assign user roles'),
                     'access' => $admin_access,
                     'callback' => 'userplus_admin_userperms',
                     'type' => MENU_LOCAL_TASK, 
                     'weight' => 0);
    if (module_exist('og')) {
      $items[] = array('path' => 'admin/user/userplus/usergroups',
                       'title' => t('assign user groups'),
                       'access' => $admin_access,
                       'callback' => 'userplus_admin_usergroups',
                       'type' => MENU_LOCAL_TASK, 
                       'weight' => 1);
    }
      
    $items[] = array('path' => 'admin/user/userplus/deletemultiple',
                     'title' => t('delete multiple users'),
                     'access' => $admin_access,
                     'callback' => 'userplus_delete_users',
                     'type' => MENU_LOCAL_TASK, 
                     'weight' => 2);
    $items[] = array('path' => 'admin/user/userplus/move_roles',
                     'title' => t('role switching'),
                     'access' => $admin_access,
                     'callback' => 'userplus_roles_move',
                     'type' => MENU_LOCAL_TASK, 
                     'weight' => 2);
  }
  
  return $items;
}


/**
 * Implementation of hook_userplus().
 */
function userplus_userplus($op) {
  if ($op == 'multiple_add_user_ignore') {
    return array('anonymous user', 'authenticated user');
  }
}

function userplus_add_users() {
  // get list of roles that we don't want to appear in the list by
  // asking each module for roles that it wants to hide from the list...
  $ignore_roles = module_invoke_all('userplus', 'multiple_add_user_ignore');
  
  $form['role_names'] = array('#tree' => true);
  
  // get the list of roles...
  $result = db_query('SELECT rid, name FROM {role} ORDER BY name');
  $role_names = array();
  while ($role = db_fetch_object($result)) {
    if (!in_array($role->name, $ignore_roles)) {
      $role_names[$role->rid] = $role->name;
      $form['role_names'][$role->rid] = array('#type' => 'value', '#value' => $role->name);
    }
  }

  $form['user'] = array('#tree' => true);
  $form['role'] = array('#tree' => true);
  
  $max_add_users = variable_get('userplus_max_add_users', 12);

  for ($i = 0; $i < $max_add_users; $i++) {
    $form['user'][$i]['name'] = array('#type' => 'textfield', '#default_value' => '', '#size' => 20, '#maxlength' => 60);
    $form['user'][$i]['mail'] = array('#type' => 'textfield', '#default_value' => '', '#size' => 30, '#maxlength' => 64);
    $form['user'][$i]['pass'] = array('#type' => 'password', '#default_value' => '', '#size' => 20, '#maxlength' => 32);
    
    foreach ($role_names as $role_rid => $role_name) {
      $form['role'][$i][$role_rid] = array('#type' => 'checkbox', '#default_value' => false);
    }
  }

  $form['submit'] = array('#type' => 'submit', '#value' => t('Create accounts'));
  return drupal_get_form('userplus_add_users', $form);
}

function userplus_add_users_submit($form_id, $edit) {
  $good_edits = array();
  $bad_edits = array();

  if ($edit) {
    foreach ($edit['user'] as $i => $u) {
      // Only deal with it if the name and email address are set...
      if ($u['name'] && $u['mail']) {
        // Always put the user in 'authenticated user' role...
        $u['roles'] = array(DRUPAL_AUTHENTICATED_RID);

        if ($edit['role']) {
          foreach ($edit['role'][$i] as $role_rid => $role_checked) {
            if ($role_checked) {
              $u['roles'][] = $role_rid;
            }
          }
        }

        // HACK - We're going to need a unique id for any form errors, so use this index...
        //
        // Note that when the errors show up on the page, there won't be any information
        // highlighted on the form because we go through with the submission anyway...
        $error_index = 0;
        
        // NOTE - We would rather call user_module_invoke('validate', ...) here,
        // but it doesn't return any useful information and relies on the modules'
        // hook_user('validate', ...) to call form_set_error()...
        //
        // So, instead, we do our own simple validation...
        if (($val = _userplus_validate_user($u['name'], $u['mail'])) === true) {
          $good_edits[] = $u;
        }
        else {
          $bad_edits[] = $u;
          
          if ($val['name']) {
            form_set_error('name' . $error_index++, $val['name']);
          }
          else if ($val['mail']) {
            form_set_error('mail' . $error_index++, $val['mail']);
          }
          else {
            // This should never happen...
            form_set_error('name' . $error_index++, t('Invalid name/e-mail address combo (%name, %email).', array('%email' => theme('placeholder', $u['mail']), '%name' => theme('placeholder', $u['name']))));
          }
        }
      }
    }
    
    // Keep track of user names and email addresses that we are adding
    // so we can check for duplicates...
    $users_added = array();
    $mails_added = array();
    
    // Handle the good ones...
    $message = '';
    foreach ($good_edits as $u) {
      // Check to see if either the user name or email is already listed
      // on this current submission form -- if so, then we bounce the
      // later one...
      if (in_array($u['name'], $users_added)) {
        form_set_error('name' . $error_index++, t('The name %name is already taken.', array('%name' => theme('placeholder', $u['name']))));
        $bad_edits[] = $u;
        continue;
      }
      else if (in_array($u['mail'], $mails_added)) {
        form_set_error('mail' . $error_index++, t('The e-mail address %email, which was entered for user %name, is already taken.', array('%email' => theme('placeholder', $u['mail']), '%name' => theme('placeholder', $u['name']))));
        $bad_edits[] = $u;
        continue;
      }
      else {
        $users_added[] = $u['name'];
        $mails_added[] = $u['mail'];
      }
      
      watchdog('user',
               t('New user: %name %email.',
               array('%name' => theme('placeholder', $u['name']),
                     '%email' => theme('placeholder', '<'. $u['mail'] .'>'))));
      
      user_save('', array('name' => $u['name'],
                          'pass' => $u['pass'],
                          'init' => $u['mail'],
                          'mail' => $u['mail'],
                          'roles' => $u['roles'],
                          'status' => 1));
      
      drupal_set_message(t('Created new user account %name.', array('%name' => theme('placeholder', $u['name']))));
    }
    
    drupal_set_message(format_plural(sizeof($users_added), '1 user was added.', '%count users were added.'));
    
    // What about the bad ones?  Perhaps we'd like them to show up pre-populated
    // on this page when it gets reloaded...
    foreach ($bad_edits as $u) {
      // For now we aren't doing anything here...
    }

    drupal_goto($_GET['q'], drupal_get_destination());
  }
}

function theme_userplus_add_users($edit) {
  $header = array('', 'username', 'e-mail address', 'password');
  
  foreach (element_children($edit['role_names']) as $rid) {
    $header[] = $edit['role_names'][$rid]['#value'];
  }

  foreach (element_children($edit['user']) as $i) {
    $user = $edit['user'][$i];

    unset($row);
    
    $row[] = array('data' => '' . ($i + 1) . '&nbsp', 'class' => 'form-index');
    $row[] = form_render($user['name']);
    $row[] = form_render($user['mail']);
    $row[] = form_render($user['pass']);

    foreach (element_children($edit['role'][$i]) as $role_rid) {
      $row[] = form_render($edit['role'][$i][$role_rid]);
    }
    
    $rows[] = $row;
  }

  $output = theme('table', $header, $rows, array('id' => 'multi-users'));
  $output .= form_render($edit['submit']);
  
  // Don't forget the dreaded form_id -- http://drupal.org/node/38926 -- or
  // the values won't be there when you get to your _submit handler...
  $output .= form_render($edit['form_id']); 

  // Form_token is necessary to pass validation -- see
  // http://drupal.org/node/89999 for more information.
  $output .= form_render($edit['form_token']);
    
  return $output;
}


// Assumes $edit['user'][uid][rid]...
function userplus_admin_userperms_submit($form_id, $edit) {
  // Figure out all the users who are on this page so we can bulk
  // delete their old user/role associations before inserting the
  // new ones...
  $users = $edit['user'];
  $uids = array_keys($users);
  
  if (count($uids) > 0) {
    $instring = '(' . implode(',', $uids) . ')';
    
    // Clear old user/role associations for these users...
    db_query('DELETE FROM {users_roles} WHERE uid IN %s', $instring);
  }
  
  foreach ($users as $uid => $values) {
    // Insert the new user/role associations for this user...
    foreach ($values as $role => $checked) {
      if ($checked == 1) {
        db_query('INSERT INTO {users_roles} (uid, rid) VALUES (%d, %d)', $uid, $role);
      }
    }
  }
  
  drupal_set_message(t('The changes have been saved.'));
  
  // Clear the cached pages and menus:
  cache_clear_all();
  menu_rebuild();
  
  drupal_goto($_GET['q'], drupal_get_destination());
}

function userplus_admin_userperms() {
  // Compile user/role array:
  $result = pager_query('SELECT u.uid, u.name FROM {users} u WHERE u.uid > 0 ORDER BY u.name', variable_get('userplus_max_show_user_roles', 25));
  $users = array();
  while ($user = db_fetch_object($result)) {
    $users[$user->uid] = $user->name;
  }
  
  $result = db_query('SELECT ur.uid, ur.rid FROM {users_roles} ur WHERE ur.uid > 0 ORDER BY ur.uid');
  $users_roles = array();
  while ($user_role = db_fetch_object($result)) {
    $users_roles[$user_role->uid][] = $user_role->rid;
  }
  
  $result = db_query('SELECT rid, name FROM {role} ORDER BY name');
  $role_names = array();
  while ($role = db_fetch_object($result)) {
    $role_names[$role->rid] = $role->name;
  }

  $form['user'] = array('#tree' => true);
  
  $weight = 1;
  foreach ($users as $uid => $user_name) {
    foreach ($role_names as $rid => $role_name) {
      $checked = is_array($users_roles[$uid]) ? in_array($rid, $users_roles[$uid]) : FALSE;
      $form['user'][$uid][$rid] = array('#type' => 'checkbox', '#title' => $role_name, '#default_value' => $checked, '#weight' => $weight++);
    }
  }
  
  // Stick the role names in the form so we can use them in the theme function...
  $form['roles'] = array('#value' => $role_names);
  // Stick the user names in the form so we can use them in the theme function...
  $form['usernames'] = array('#value' => $users);
  
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save permissions'));
  
  return drupal_get_form('userplus_admin_userperms', $form);
}

function theme_userplus_admin_userperms($edit) {
  $rows = array();
  
  // Render role/permission overview:
  $header = array_merge(array(t('User')), $edit['roles']['#value']);

  foreach (element_children($edit['user']) as $uid) {
    unset($row);
    $row[] = array('data' => l($edit['usernames']['#value'][$uid], "user/$uid/edit"), 'class' => 'username');
    foreach (element_children($edit['user'][$uid]) as $rid) {
      unset($edit['user'][$uid][$rid]['#title']);
      $row[] = form_render($edit['user'][$uid][$rid]);
    }
    
    $rows[] = $row;
  }
  
  $output = theme('table', $header, $rows, array('id' => 'users-roles'));
  $output .= '<br \>';
  $output .= form_render($edit['submit']);
  $output .= theme('pager', NULL, variable_get('userplus_max_show_user_roles', 25));
  
  // Don't forget the dreaded form_id -- http://drupal.org/node/38926 -- or
  // the values won't be there when you get to your _submit handler...
  $output .= form_render($edit['form_id']); 

  // Form_token is necessary to pass validation -- see
  // http://drupal.org/node/89999 for more information.
  $output .= form_render($edit['form_token']);

  return $output;
}

// Assumes $edit['user'][uid][nid]...
function userplus_admin_usergroups_submit($form_id, $edit) {
  // Figure out all the users who are on this page so we can bulk
  // delete their old user/group associations before inserting the
  // new ones...
  $users = $edit['user'];
  $uids = array_keys($users);

  // Clear old user/group associations for these users...
  if (count($uids) > 0) {
    $saved_og_uids = array();
    foreach ($edit['user'] as $uid => $groups) {
      foreach ($groups as $nid => $state) {
        if ($state == 0) {
          $result = db_query('DELETE 
                              FROM {og_uid}  
                              WHERE nid = %d 
                              AND uid = %d',
                              $nid, $uid
                              );
        }
      }  
    }
  }  
  
  foreach ($users as $uid => $values) {
    // Insert the new user/group associations for this user...
    foreach ($values as $group => $checked) {
      if ($checked == 1) {
        $result = db_query('SELECT * 
                            FROM {og_uid} ug 
                            WHERE ug.uid = %d
                            AND ug.nid = %d',
                            $uid, $group
                            );
        $record = db_fetch_object($result);
        if (!$record) {
          db_query('INSERT INTO {og_uid} 
                    (uid, nid, is_active, created, changed) 
                    VALUES (%d, %d, %d, %d, %d)', 
                    $uid, $group, 1, time(), time()
                    );
        }
      }
    }
  }

  drupal_set_message(t('The changes have been saved.'));
  
  // Clear the cached pages and menus:
  cache_clear_all();
  menu_rebuild();
  
  drupal_goto($_GET['q'], drupal_get_destination());
}

function userplus_admin_usergroups() {
  // Compile user/group array:
  $result = pager_query('SELECT u.uid, u.name 
                         FROM {users} u 
                         WHERE u.uid > 0 
                         ORDER BY u.name', 
                         variable_get('userplus_max_show_user_groups', 25)
                         );
  $users = array();
  while ($user = db_fetch_object($result)) {
    $users[$user->uid] = $user->name;
  }
  
  $result = db_query('SELECT ug.uid, ug.nid, ug.is_active 
                      FROM {og_uid} ug 
                      WHERE ug.nid > 0 
                      ORDER BY ug.uid'
                      );

  $users_groups = array();
  while ($user_group = db_fetch_object($result)) {
    $users_groups[$user_group->uid][] = $user_group->nid;
  }
  
  $result = db_query('SELECT ug.nid, n.title 
                      FROM {og} ug
                      INNER JOIN {node} n
  
                      ON ug.nid = n.nid 
                      ORDER BY n.title');
  $group_names = array();
  while ($group = db_fetch_object($result)) {
    $group_names[$group->nid] = $group->title;
  }

  $form['user'] = array('#tree' => true);
  
  $weight = 1;
  foreach ($users as $uid => $user_name) {
    foreach ($group_names as $nid => $goup_name) {
      $checked = is_array($users_groups[$uid]) ? in_array($nid, $users_groups[$uid]) : FALSE;
      $form['user'][$uid][$nid] = array('#type' => 'checkbox', '#title' => $group_name, '#default_value' => $checked, '#weight' => $weight++);
    }
  }
  
  // Stick the role names in the form so we can use them in the theme function...
  $form['groups'] = array('#value' => $group_names);
  // Stick the user names in the form so we can use them in the theme function...
  $form['usernames'] = array('#value' => $users);
  
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save groups'));
  
  drupal_set_title('user groups');
  return drupal_get_form('userplus_admin_usergroups', $form);
}

function theme_userplus_admin_usergroups($edit) {
  $rows = array();
  
  // Render group overview:
  $header = array_merge(array(t('User')), $edit['groups']['#value']);

  foreach (element_children($edit['user']) as $uid) {
    unset($row);
    $row[] = array('data' => l($edit['usernames']['#value'][$uid], "user/$uid/edit"), 'class' => 'username');
    foreach (element_children($edit['user'][$uid]) as $nid) {
      unset($edit['user'][$uid][$nid]['#title']);
      $row[] = form_render($edit['user'][$uid][$nid]);
    }
    
    $rows[] = $row;
  }
  
  $output = theme('table', $header, $rows, array('id' => 'users-groups'));
  $output .= '<br \>';
  $output .= form_render($edit['submit']);
  $output .= theme('pager', NULL, variable_get('userplus_max_show_user_groups', 25));
  
  // Don't forget the dreaded form_id -- http://drupal.org/node/38926 -- or
  // the values won't be there when you get to your _submit handler...
  $output .= form_render($edit['form_id']); 

  // Form_token is necessary to pass validation -- see
  // http://drupal.org/node/89999 for more information.
  $output .= form_render($edit['form_token']);

  return $output;
}

function userplus_delete_users() {
  $weight = 0;
  $form['user'] = array('#tree' => true);
  $form['usermap'] = array('#tree' => true);
  
  $result = pager_query('SELECT u.uid, u.name FROM {users} u WHERE u.uid > 0 ORDER BY u.name', variable_get('userplus_max_delete_users', 25));

  while ($user = db_fetch_object($result)) {
    $form['user'][$user->uid] = array('#type' => 'checkbox', '#attributes' => array('title' => $user->name), '#default_value' => false, '#weight' => $weight++);
    $form['usermap'][$user->uid] = array('#type' => 'hidden', '#value' => $user->name, '#weight' => $weight++);
  }
  
  $form['submit'] = array('#type' => 'submit', '#value' => t('Delete checked users'));
  
  return drupal_get_form('userplus_delete_users', $form);
}

function theme_userplus_delete_users($edit) {
  $rows = array();
  
  $header = array(t('User'), t('Delete'), '');

  foreach (element_children($edit['user']) as $uid) {
    unset($row);
    $row[] = array('data' => l($edit['user'][$uid]['#attributes']['title'], "user/$uid/edit"), 'class' => 'username');
    $row[] = form_render($edit['user'][$uid]);
    $row[] = form_render($edit['usermap'][$uid]);    
    $rows[] = $row;
  }
  
  $output = theme('table', $header, $rows, array('id' => 'delete-users'));
  $output .= '<br \>';
  $output .= form_render($edit['submit']);
  $output .= theme('pager', NULL, variable_get('userplus_max_delete_users', 25));
  
  // Don't forget the dreaded form_id -- http://drupal.org/node/38926 -- or
  // the values won't be there when you get to your _submit handler...
  $output .= form_render($edit['form_id']); 

  // Form_token is necessary to pass validation -- see
  // http://drupal.org/node/89999 for more information.
  $output .= form_render($edit['form_token']);

  return $output;
}

function userplus_delete_users_submit($form_id, $edit) {
  // array filter returns only elements with true values
  foreach (array_filter($edit['user']) as $uid => $value) {
    _userplus_delete_user($uid, $edit['usermap'][$uid]);
  }

  drupal_goto($_GET['q'], drupal_get_destination());
}

/*
 * _userplus_delete_user() deletes a user from the database.  this should
 * probably be a helper inside user.module that doesn't perform any UI work...
 */
function _userplus_delete_user($uid) {
  global $user;
  if ($user->uid == $uid) {
    drupal_set_message(t('You may not delete the currently logged in user on this page.'));
    return;
  }
  
  $edit = array();
  $account = user_load(array('uid' => $uid));
  db_query('DELETE FROM {users} WHERE uid = %d', $uid);
  db_query('DELETE FROM {sessions} WHERE uid = %d', $uid);
  db_query('DELETE FROM {users_roles} WHERE uid = %d', $uid);
  db_query('DELETE FROM {authmap} WHERE uid = %d', $uid);
  watchdog('user', t('Deleted user: %name %email.', array('%name' => theme('placeholder', $account->name), '%email' => theme('placeholder', '<'. $account->mail .'>'))), WATCHDOG_NOTICE);
  drupal_set_message(t('Deleted user: %name %email.', array('%name' => theme('placeholder', $account->name), '%email' => theme('placeholder', '<'. $account->mail .'>'))));
  module_invoke_all('user', 'delete', $edit, $account);
}

function userplus_settings() {
  // "add multiple users" settings
  $form['add-multiple-users'] = array('#type' => 'fieldset', '#collapsible' => true, '#title' => t('"add multiple users" settings'));
  $form['add-multiple-users']['userplus_max_add_users'] = array('#type' => 'textfield', '#title' => t('Maximum number of users that can be added at once'), '#default_value' => variable_get('userplus_max_add_users', '12'), '#size' => 4, '#maxlength' => 6, '#description' => t('The number of rows that will appear on the "add multiple users" page.'));

  // "assign user roles" settings
  $form['assign-user-roles'] = array('#type' => 'fieldset', '#collapsible' => true, '#title' => t('"assign user roles" settings'));
  $form['assign-user-roles']['userplus_max_show_user_roles'] = array('#type' => 'textfield', '#title' => t('Number of users to show per page'), '#default_value' => variable_get('userplus_max_show_user_roles', '25'), '#size' => 4, '#maxlength' => 6, '#description' => t('The number of rows that will appear, per page, when using the "assign user roles" page.'));

  if (module_exist('og')) {
    // "assign user group" settings
    $form['assign-user-groups'] = array('#type' => 'fieldset', '#collapsible' => true, '#title' => t('"assign user groups" settings'));
    $form['assign-user-groups']['userplus_max_show_user_groups'] = array('#type' => 'textfield', '#title' => t('Number of users to show per page'), '#default_value' => variable_get('userplus_max_show_user_groups', '25'), '#size' => 4, '#maxlength' => 6, '#description' => t('The number of rows that will appear, per page, when using the "assign user groups" page.'));
  }

  // "delete multiple users" settings
  $form['delete-multiple-users'] = array('#type' => 'fieldset', '#collapsible' => true, '#title' => t('"delete multiple users" settings'));
  $form['delete-multiple-users']['userplus_max_delete_users'] = array('#type' => 'textfield', '#title' => t('Maximum number of users that can be deleted at once'), '#default_value' => variable_get('userplus_max_delete_users', '25'), '#size' => 4, '#maxlength' => 6, '#description' => t('The number of rows that will appear on the "delete multiple users" page.'));
    
  return $form;
}

/*
 * _userplus_validate_user() is based on _user_edit_validate().  it would be nice to
 * be able to call something in user.module that validates what's passed in against
 * the users in the database without doing anything to affect the user interface.
 *
 * ideally we would like to call:
 *
 *   user_module_invoke('validate', $u, $u, 'account');
 *
 * because this would invoke any other modules' validation for the user.  unfortunately,
 * hook_user('validate', ...) is expected to call form_set_error() when validation fails.
 * this is a problem because multiple form_set_error('name', ...) or form_set_error('mail', ...)
 * calls do not accumulate -- only the first one sets an error.
 *
 * note also that we don't bother passing in $uid since we are never going to get in
 * here in an UPDATE situation.
 *
 */
function _userplus_validate_user($name = null, $mail = null) {
  if ($name) {
    // Validate the username:
    if ($error = user_validate_name($name)) {
      return array('name' => $error);
    }
    else if (db_num_rows(db_query('SELECT uid FROM {users} WHERE LOWER(name) = LOWER("%s")', $name)) > 0) {
      return array('name' => t('The name %name is already taken.', array('%name' => theme('placeholder', $name))));
    }
    else if (drupal_is_denied('user', $name)) {
      return array('name' => t('The name %name has been denied access.', array('%name' => theme('placeholder', $name))));
    }
  }
  
  if ($mail) {
    // Validate the e-mail address:
    if ($error = user_validate_mail($mail)) {
      return array('mail' => $error);
    }
    else if (db_num_rows(db_query('SELECT uid FROM {users} WHERE LOWER(mail) = LOWER("%s")', $mail)) > 0) {
      return array('mail' => t('The e-mail address %email is already taken.', array('%email' => theme('placeholder', $mail))));
    }
    else if (drupal_is_denied('mail', $mail)) {
      return array('mail' => t('The e-mail address %email has been denied access.', array('%email' => theme('placeholder', $mail))));
    }
  }
  
  return true;
}

function userplus_roles_move($rid = 0) {
  $roles = user_roles(1);
  unset($roles[DRUPAL_AUTHENTICATED_RID]);
  if ($rid) {
    drupal_set_title(t("Remove users from role '%role'", array('%role' => check_plain($roles[$rid]))));
    $result = pager_query('SELECT u.uid, u.name FROM {users} u INNER JOIN {users_roles} ur ON u.uid = ur.uid WHERE ur.uid > 0 AND ur.rid = %d ORDER BY u.name', 20, 0, NULL, $rid);

    $users = array();
    $form['#tree'] = TRUE;
    while ($user = db_fetch_object($result)) {
      $users[$user->uid] = '';
      $form['user'][$user->uid] = array('#type' => 'markup', '#value' => theme('username', $user));
    }
    $form['users'] = array('#type' => 'checkboxes', '#options' => $users);
    unset($roles[$rid]);
    $form['roles'] = array(
      '#type' => 'select',
      '#title' => t('Move users to'),
      '#options' => $roles,
      '#description' => t('The selected users will get removed from the role shown above and assigned to the selected role.'),
      );
    $form['rid'] = array('#type' => 'hidden', '#value' => $rid);
    $form['submit'] = array('#type' => 'submit', '#value' => t('Move users'));

    return drupal_get_form('userplus_move_roles', $form);
  }
  else {
    $header = array(t('Role'));
    $rows = array();
    foreach ($roles as $role_id => $role_name) {
      $rows[] = array(l($role_name, 'admin/user/userplus/move_roles/'. $role_id));
    }
    return theme('table', $header, $rows, array('id' => 'roleswitch'));
  }
}

/**
 * Theme above form.
 */
function theme_userplus_move_roles($form) {
  $header = array('', t('User'));
  foreach (element_children($form['users']) as $key) {
    $row = array();
    $row[] = form_render($form['users'][$key]);
    $row[] = form_render($form['user'][$key]);
    $rows[] = $row;
  }
  if (!count($rows)) {
    $rows[] = array(array('data' => t('No users with this role available.'), 'colspan' => '2'));
  }
  $output .= theme('table', $header, $rows);
  $output .= form_render($form['rid']);
  if ($form['pager']['#value']) {
    $output .= form_render($form['pager']);
  }

  $output .= form_render($form);
  return $output;
}

function userplus_move_roles_validate($form_id, $form_values) {
  foreach ($form_values['users'] as $uid => $value) {
    if ($uid == $value) {
      $users[] = $uid;
    }
  }
  if (!count($users)) {
    form_set_error('users', t('No users selected.'));
  }
}

function userplus_move_roles_submit($form_id, $form_values) {
  $users = array();
  foreach ($form_values['users'] as $uid => $value) {
    if ($uid == $value) {
      $users[] = $uid;
    }
  }
  if (count($users)) {
    db_query("DELETE FROM {users_roles} WHERE rid = %d AND uid IN (%s)", $form_values['roles'], implode(',', $users));
    db_query("UPDATE {users_roles} SET rid = %d WHERE rid = %d AND uid IN (%s)", $form_values['roles'], $form_values['rid'], implode(',', $users));
    $roles = user_roles(1);
    drupal_set_message(t('Users moved from role %role1 to role %role2.', array('%role1' => theme('placeholder', $roles[$form_values['rid']]), '%role2' => theme('placeholder', $roles[$form_values['roles']]))));
  }
  else {
    drupal_set_message(t('No users selected.'), 'error');
  }
}

