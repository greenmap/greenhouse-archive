<?php
// $Id: user_status.module,v 1.4.2.5 2007/01/16 01:11:17 dww Exp $
// $Name: DRUPAL-4-7--1-1 $

/**
 * @file
 * Send email to users when their account is modified by an admin
 *
 * Probably don't want user emails to use t() since that might result in
 * some unexpected languages being sent to users.
 *
 * @todo Consider using something like define() for default email strings
 */

/**
 * Print module description on module activation page
 */
function user_status_help($section) {
  $output = '';

  switch ($section) {
  case 'admin/help#user_status':
    break;
  case 'admin/modules#description':
    $output .= t('Send user account status change notifications by email.');
    break;
  case 'admin/settings/user_status':
    $output .= '<p>'. t('This page allows you to configure if automatic emails should be set to users when their account is activated, blocked, or deleted. For each account status, you can control if a notification should be sent, and if so, you define what the subject and body of the resulting email will be.') .'</p>'
    . '<p>'. t('For any of the settings below, you can use placeholders which will be substituted with the current values for the user and site.') .' '. t('Available variables are:') .' %username, %site, %login_url, %uri, %uri_brief, %mailto, %date, %edit_uri.</p>'
    . '<p>'. t('If your site requires administrator approval for new users and you enable the automatic emails below whenever an account is activated, it is highly recommended that you change the text of the welcome message when users first register. By default, they will be sent a temporary password and one-time login URL that will not work, since their account will initially be blocked. It is better to put the initial login information into the notification email when their account is finally approved, so that users are never sent a temporary password and one-time login URL that will not work. You can modify this text at the %user_settings page.', array('%user_settings' => l(t('users settings'), 'admin/settings/user')));
    break;
  }
  return $output;
}

/**
 * Default subject line of email when user is activated
 *
 * @return string
 */
function user_status_activated_subject() {
  return '%username account approved';
}

/**
 * Default body of email when user is activated
 *
 * @return string
 */
function user_status_activated_body() {
  return "Hello %username,\n\nYour account at %site has been activated.\n\nYou may now log in by clicking on this link or copying and pasting it in your browser:\n\n%login_url\n\nThis is a one-time login, so it can be used only once.\n\nAfter logging in, you will be redirected to %edit_uri so you can change your password.\n\nOnce you have set your own password, you will be able to log in to %login_uri in the future using the following username:\n\nusername: %username\n";
}

/**
 * Default subject line of email when user is blocked
 *
 * @return string
 */
function user_status_blocked_subject() {
  return '%username account blocked';
}

/**
 * Default body of email when user is blocked
 *
 * @return string
 */
function user_status_blocked_body() {
  return "Hello %username,\n\nYour account on %site has been blocked.";
}

/**
 * Default subject line of email when user is deleted
 *
 * @return string
 */
function user_status_deleted_subject() {
  return '%username account deleted';
}

/**
 * Default body of email when user is deleted
 *
 * @return string
 */
function user_status_deleted_body() {
  return "Hello %username,\n\nYour account on %site has been deleted.";
}

/**
 * Form to modify default values for emails to users during account status modification
 *
 * @return string
 */
function user_status_settings() {
  $form['activate_status'] = array(
    '#type' => 'fieldset',
    '#title' => t('Activated'),
    '#collapsible' => true,
    '#collapsed' => true
  );
  $form['activate_status']['user_status_activated_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Notify user when account is activated.'),
    '#default_value' => variable_get('user_status_activated_enable', FALSE)
  );
  $form['activate_status']['user_status_activated_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('user_status_activated_subject', user_status_activated_subject()),
    '#size' => 72,
    '#maxlength' => 200,
  );
  $form['activate_status']['user_status_activated_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => variable_get('user_status_activated_body', user_status_activated_body()),
    '#description' => t('In addition to the variables described above, the password will be reset when users are activated, so you can also use %password (the new temporary password) and %login_url (a one-time login URL)'),
    '#cols' => 72,
    '#rows' => 10,
  );

  $form['block_status'] = array(
    '#type' => 'fieldset',
    '#title' => t('Blocked'),
    '#collapsible' => true,
    '#collapsed' => true
  );
  $form['block_status']['user_status_blocked_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Notify user when account is blocked.'),
    '#default_value' => variable_get('user_status_blocked_enable', FALSE)
  );
  $form['block_status']['user_status_blocked_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('user_status_blocked_subject', user_status_blocked_subject()),
    '#size' => 72,
    '#maxlength' => 200,
  );
  $form['block_status']['user_status_blocked_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => variable_get('user_status_blocked_body', user_status_blocked_body()),
    '#cols' => 72,
    '#rows' => 5,
  );

  $form['delete_status'] = array(
    '#type' => 'fieldset',
    '#title' => t('Deleted'),
    '#collapsible' => true,
    '#collapsed' => true
  );
  $form['delete_status']['user_status_deleted_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Notify user when account is deleted.'),
    '#default_value' => variable_get('user_status_deleted_enable', FALSE)
  );
  $form['delete_status']['user_status_deleted_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('user_status_deleted_subject', user_status_deleted_subject()),
    '#size' => 72,
    '#maxlength' => 200,
  );
  $form['delete_status']['user_status_deleted_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => variable_get('user_status_deleted_body', user_status_deleted_body()),
    '#cols' => 72,
    '#rows' => 5,
  );

  return $form;
}

/**
 * Sends user an email based on the account modification
 *
 * @param string $op
 * @param array $edit
 * @param object $user
 * @return bool Returns TRUE if the mail was successfully accepted for delivery, FALSE otherwise.
 */
function user_status_user($op, &$edit, &$user) {
  if ($op == 'update' || $op == 'delete') {
    // We might send the email, so just set all of this up once.
    $from = variable_get('site_mail', ini_get('sendmail_from'));
    $headers = "From: $from\nReply-to: $from\nX-Mailer: Drupal\nReturn-path: $from\nErrors-to: $from";
  }

  switch ($op) {
  case 'update':
    if (isset($edit['status']) && $edit['status'] != $user->status) {
      if (valid_email_address($user->mail) && valid_email_address($from)) {
        switch ($edit['status']) {
        case 0:
          if (variable_get('user_status_blocked_enable', FALSE)) {
            // Do not generate new password and 1-time login when blocking.
            $variables = _user_status_get_variables($user, FALSE);
            $subject = strtr(variable_get('user_status_blocked_subject', user_status_blocked_subject()), $variables);
            $body = strtr(variable_get('user_status_blocked_body', user_status_blocked_body()), $variables);
            return user_mail($user->mail, $subject, $body, $headers);
          }
          break;

        case 1:
          if (variable_get('user_status_activated_enable', FALSE)) {
            // Since the user is now active, generate a new temporary
            // password and 1-time login URL.
            $variables = _user_status_get_variables($user, TRUE);
            $subject = strtr(variable_get('user_status_activated_subject', user_status_activated_subject()), $variables);
            $body = strtr(variable_get('user_status_activated_body', user_status_activated_body()), $variables);
            return user_mail($user->mail, $subject, $body, $headers);
          }
          break;
        } // end status switch
      } // end email if
    } // end status if
    break;

  case 'delete':
    if (variable_get('user_status_deleted_enable', FALSE)) {
      if (valid_email_address($user->mail) && valid_email_address($from)) {
        // Do not generate new password and 1-time login when deleting.
        $variables = _user_status_get_variables($user, FALSE);
        $subject = strtr(variable_get('user_status_deleted_subject', user_status_deleted_subject()), $variables);
        $body = strtr(variable_get('user_status_deleted_body', user_status_deleted_body()), $variables);
        return user_mail($user->mail, $subject, $body, $headers);
      }
    }
    break;
  }
  return false;
}

/**
 * Return an array of substitution variables for email bodies and subjects.
 *
 * @param $user
 *   The user object of the account being notified.
 * @param $reset_password
 *   Boolean to specify if the account's password should be reset and
 *   a new temporary password and 1-time login URL generated.
 *
 * @return
 *   Array of substitution variables.
 */
function _user_status_get_variables($user, $reset_password = FALSE) {
  global $base_url;
  $variables = array(
    '%username' => $user->name,
    '%site' => variable_get('site_name', 'drupal'),
    '%uri' => $base_url,
    '%uri_brief' => substr($base_url, strlen('http://')),
    '%mailto' => $user->mail,
    '%date' => format_date(time()),
    '%login_uri' => url('user', NULL, NULL, TRUE),
    '%edit_uri' => url('user/'. $user->uid .'/edit', NULL, NULL, TRUE),
  );
  if ($reset_password) {
    $pass = user_password();
    $user->pass = $pass;
    $variables['%password'] = $pass;
    $variables['%login_url'] = user_pass_reset_url($user);
    db_query("UPDATE {users} SET pass='%s' WHERE uid = %d", md5($pass), $user->uid);
  }
  return $variables;
}
