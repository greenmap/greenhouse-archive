<?php
// $Id: greenmap.module,v 1.0.0 2007/06/26 08:28:26 tom_o_t Exp $

/**
* Display help and module information
*/
function greenmap_help($section='') {
  $output = '';
  switch ($section) {
    case 'admin/modules#description':
      $output = t('Alters modules and forms for GreenMap.org.');
      break;
    case 'node/add#simplenews':
      $output =  t('Alters modules and forms for GreenMap.org.');
      break;
  }
  return $output;
}

/**
 * Implementation of hook_node_info().
 */
function greenmap_node_info() {
  return array('greenmap' => array('name' => t('greenmap'), 'base' => 'greenmap'));
}


function greenmap_form_alter($form_id,&$form)  {
	
//  if($form_id=="theme_sn_form")  {
//    $form['form_info'] = array(
//    '#value' => '<pre>'. print_r($form,1) .'</pre>'
 //    );
	

//		$form['sn_email_141']['#title']=""; // remove the title above the email box
//		$form['sn_subscribe_141'] = array(
//			'#type' => 'hidden',
//			'#value' => 'subscribe',
//			);
//		$form['sn_141'] = array(
//			'#type' => 'submit',
//			'#value' => 'go',
//			);
	   
//   }

 global $form_values;
 switch ($form_id) {
	
	// this adds the calculator button in the Fees page
    case 'user_edit':
		  global $i18n_langpath; 
		  
		  
		  $form['F. Fees']['calculatortext'] = array(
		  	'#type' => 'markup', 
			'#weight' => '-1001',
			'#value' => '<p class="calculator">' . t('Click the button below to launch the fee calculator (it opens in a new window). ') . t('The Fee Calculator will automatically put your details into this section of the form. Check that this has been done, then close the Calculator and continue to complete the rest of this form. If you have any problems please contact Green Map System.') . '</p>'
		  );
		  
		  $form['F. Fees']['calculator2'] = array(
		  	'#type' => 'markup', 
			'#weight' => '-1000',
			'#value' => '<p class="calculator"><input type="button" value="' . t('Launch the Fee Calculator') . '" onClick="window.open(\'/greenhouse/' . $i18n_langpath . '/calculator?theme=simple\', \'feespage\'); return false"></p>'
		  );
	break;

  }

	if($form_id=="user_register") {
	
		$regstuff = "<p>" . t('Before registering please browse the Participate section (using the menu on the left) to find out what is involved in becoming a Mapmaker') . "</p>";
		$regstuff .= "<p>" . t('Now, Get Ready! Here are the Five Steps') . "</p>";
		$regstuff .= "<p>" . t('Step 1: Check if a Green Map project is already underway in your area ');
		$regstuff .= "(" . l(t('Check the List'),'all') . ").";
		$regstuff .= t(' If it is active, contact the Mapmaker and see if you can get involved. 
							  If there are no existing Green Map projects or if your specific project scale 
							  is different, you can begin the registration process.') . "</p>";
		$regstuff .= "<p>" . t('Step 2: Read over the ') .  l(t('Terms and Conditions'),'participate/mapmakeragreementplain') .  "</p>";
		$regstuff .= "<p>" . t('Step 3 (optional): You can download the registration form to complete offline with 
								your project partners. Then come back to the website and continue the registration process.') . 
								t(' Different languages are available in the Offline Registration Documents section (or use 
								top left corner links for different languages). ') . "</p>";
		
		$regstuff .= "<fieldset class=\"collapsible collapsed\"><legend>" . t('Offline Registration Documents') . "</legend><div>" ;
		
		$regstuff .= l(t('English Registration Files'),file_create_url('Registration_EN.zip')) . '<br />';
		$regstuff .= l(t('Chinese Traditional Registration Files'),file_create_url('Registration_CN_Traditional.zip')) . '<br />';
		$regstuff .= l(t('Chinese Simplified Registration Files'),file_create_url('Registration_Simp_CN.zip')) . '<br />';
		$regstuff .= l(t('Spanish Registration Files'),file_create_url('Registration_ES.zip')) . '<br />';
		$regstuff .= l(t('Indonesian Registration Files'),file_create_url('Registration_ID.zip')) . '<br />';
		$regstuff .= l(t('Japanese Registration Files'),file_create_url('Registration_JP.zip')) . '<br />';
		
		$regstuff .= "</div></fieldset>";
		
		$regstuff .= "<p>" . t('Step 4: This is the first page of your registration form. Fill in all fields in the form below to begin the registration process.') . 
					 t('If you would like to preview the fee or read about services you can contribute instead of a fee, ') . l(t('click here to go to the Mapmakers FAQ'),'participate/FAQ_makers', NULL, NULL, '1554') . "</p>";
		$regstuff .= "<p>" . t('Step 5: After clicking the "Next" button, you will be automatically logged in and taken to your Profile page. On this page you must 
								add further details before you can submit your completed application. It will then be reviewed by Green Map System, who will contact you 
								within two working days. Then, you can send in your fee, download our great tools and officially begin your Green Map project! ') . "</p>";
	
		$form['form_intro'] = array (
			'#type' => 'markup',
			'#weight' => '-20',
			'#value' => $regstuff ,
		);
		$form['submit']['#value'] = 'Next';
	}
}


function greenmap_block($op = "list", $delta = 0) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('Registration Block');
	$blocks[1]['info'] = t('Greenmap Translation Links');
	$blocks[2]['info'] = t('Map of the Day Block');
	$blocks[3]['info'] = t('Resubmit Registration Block');
    return $blocks;
  }
  elseif ($op == 'view') {
      switch ($delta) {
      	case 0:
		  $block['subject'] = 'Greenmap Registration';
		  $block['content'] = greenmap_form();
		  // return $block;
		 break;
		 
		 case 1:
		     $blocks['subject'] = 'Switcheroo'; // dont want a subject header
    		 $blocks['content'] = 'switch' . theme('item_list', greenmap_translation_get_links($_GET['q']));
		 break;
		 
		 case 2:
		 	$blocks['subject'] = 'Map of the Day';
			$blocks['content'] = ''; // insert result of database query here. Need to cache result for speed. The function is written below
		 break;
		 
      	case 3:
		  $block['subject'] = 'Greenmap Resubmit Registration';
		  $block['content'] = greenmap_resubmit_form();
		  // return $block;
		 break;
		 
		}
		return $block;
  }
}





/**************************
** Hook_form 
** Form contianing submit button for when registration is complete - called in block above
**************************/


function greenmap_form($edit = null) {



  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit to Green Map'),
    '#submit' => TRUE,
  );
  return drupal_get_form('greenmap_form', $form);
}

function greenmap_form_submit($form_id, $form_values) {
$useridforquery = $GLOBALS['user']->uid;
  db_query("INSERT INTO {profile_values} (fid, uid, value) VALUES ('89', $useridforquery, 'yes')");
// need to insert new line in profile_values  set fid = fid of 'pending' and uid = users uid and value = 1

// need to email greenhouse@greenmap.org to inform of new reg.
$registration_email = 'New User ' . $GLOBALS['user']->name . ' has completed the registration process. ';
$registration_email .= '<a href="http://www.greenmap.org' . base_path() . 'user/' . $GLOBALS['user']->uid . '">View their account</a>';
$registration_subject = 'New User ' . $GLOBALS['user']->name . ' has registered';

// To send HTML mail, the Content-type header must be set
$headers  = 'MIME-Version: 1.0' . "\n";
$headers .= 'Content-type: text/html; charset=iso-8859-1' . "\n";

// Additional headers
$headers .= 'From: greenhouse@greenmap.org' . "\n";

user_mail('greenhouse@greenmap.org',$registration_subject,$registration_email,$headers);
drupal_goto('participate/submitted'); //the page the user should see, after submit the form.
}



/**************************
** Hook_form 
** Form contianing submit button for when registration is being RESUBMITTED - called in block above
**************************/


function greenmap_resubmit_form($edit = null) {



  $form['resubmit'] = array(
    '#type' => 'submit',
    '#value' => t('Resubmit'),
    '#submit' => TRUE,
  );
  return drupal_get_form('greenmap_resubmit_form', $form);
}

function greenmap_resubmit_form_submit($form_id, $form_values) {

// need to email greenhouse@greenmap.org to inform of resubmit
$registration_email = 'New User ' . $GLOBALS['user']->name . ' has RESUBMITTED their registration. ';
$registration_email .= '<a href="http://www.greenmap.org' . base_path() . 'user/' . $GLOBALS['user']->uid . '">View their account</a>';
$registration_subject = 'New User ' . $GLOBALS['user']->name . ' has RESUBMITTED';

// To send HTML mail, the Content-type header must be set
$headers  = 'MIME-Version: 1.0' . "\n";
$headers .= 'Content-type: text/html; charset=iso-8859-1' . "\n";

// Additional headers
$headers .= 'From: greenhouse@greenmap.org' . "\n";

user_mail('greenhouse@greenmap.org',$registration_subject,$registration_email,$headers);
drupal_goto('participate/submitted'); //the page the user should see, after submit the form.
}



/**
 * Copied from i18n translation.module - function translation_get_links
 * 
 * Returns an array of links for all languages, with or without names
 */
function greenmap_translation_get_links($path = '', $names = 1) {
  $current = i18n_get_lang();
  foreach(i18n_supported_languages() as $lang => $name){
    $url = translation_url($path, $lang);
    $name = $names ? t($name) : '' ; // Should be localized??
    $links[]= theme('i18n_link', $name, i18n_path($url, $lang) , $lang);
  }
  return $links;  
}

/**
 * Produces a language link without the  flag - copied and hacked from i18n
 */
function theme_i18n_greenmap_link($text, $target, $lang, $separator=' '){
  $output = '<span class="i18n-link">';
  $attributes = ($lang == i18n_get_lang()) ? array('class' => 'active') : NULL;
  $output .= l($text, $target, $attributes, NULL, NULL, FALSE, TRUE);
  $output .= '</span>';
  return $output;
}



// Function to fetch map of the day from database - called in block 3 above

function map_of_the_day() {

//  $result = db_query_range("SELECT n.title, n.nid, ncm.field_main_map_image_alt
//    FROM {node} n INNER JOIN {node_content_map} ncm ON n.vid = ncm.vid WHERE n.type = 'content_map' AND n.nid = '1439' ", 0, 1); // last variable limits it to one result
//  while ($map_of_the_day_result = db_fetch_object($result)) {
    // Perform operations on $map_of_the_day_result->body, etc. here.
//	$map_of_the_day_result->title // do something here.....*************************************
//  } 
  
} // end map of the day



// add a css class to the 'comment' link so that I can insert an image using css. This will override or add to comment.module line 200 ish


/**
 * Implementation of hook_link().
 */
function hook_link($type, $node = 0, $main = 0) {
  $links = array();

  if ($type == 'node' && $node->comment) {

    if ($main) {
      // Main page: display the number of comments that have been posted.

      if (user_access('access comments')) {
        $all = comment_num_all($node->nid);
        $new = comment_num_new($node->nid);

        if (!$all) {
          if ($node->comment == COMMENT_NODE_READ_WRITE) {
            if (user_access('post comments')) {
              $links[] = l(t('add new comment'), "comment/reply/$node->nid", array('title' => t('Add a new comment to this page.'), 'class' => 'active'), NULL, 'comment_form');
            }
            else {
              $links[] = theme('comment_post_forbidden', $node->nid);
            }
          }
        }
      }
    }
    else {
      // Node page: add a "post comment" link if the user is allowed to
      // post comments, if this node is not read-only, and if the comment form isn't already shown

      if ($node->comment == COMMENT_NODE_READ_WRITE) {
        if (user_access('post comments')) {
          if (variable_get('comment_form_location', COMMENT_FORM_SEPARATE_PAGE) == COMMENT_FORM_SEPARATE_PAGE) {
            if($_GET[theme] == 'simple') {
				$query="theme=simple";
			 }
			$links[] = l(t('add new comment'), "comment/reply/$node->nid", array('title' => t('Share your thoughts and opinions related to this posting.'), 'class' => 'active'), $query, 'comment_form');
          }
        }
        else {
          $links[] = theme('comment_post_forbidden', $node->nid);
        }
      }
    }
  }

  if ($type == 'comment') {
    $links = comment_links($node, $main);
  }

  return $links;
}

// end of hook_link


function greenmap_callback_from_block_25() {
  //choose the role to list by value. 
  // Note ID 1 = anonymous, ID 2 = authenticated user,  ID 3 = member,  ID 4 = admin-level1
  // so valid values here are > 2.

  $rid = 5;
  print <<<EOF
<br/>
Click on the Field name to sort the list.<br/><br>
Currently the fields: Profession, Membership, Gender, Age, Hobbies & Interest, and Zip code, are not sortable.
EOF;

  $header = array(
    array('data' => t('Username'), 'field' => 'u.name'),
    array('data' => t('Member for'), 'field' => 'u.created'),
    array('data' => t('User Last Accessed'), 'field' => 'u.access', 'sort' => 'desc'),
    t('Pending Reason'),
    t('Operations')
  );
  $sql = "SELECT u.uid, u.name, u.status, u.created, u.access FROM {users} u INNER JOIN {users_roles} ur ON u.uid=ur.uid INNER JOIN {profile_values} pv ON pv.uid=u.uid AND pv.fid=89 WHERE ur.rid = $rid AND pv.value = 'yes'";
  $sql .= tablesort_sql($header);
  $result = pager_query($sql, 50);

  $status = array(t('blocked'), t('active'));
  while ($account = db_fetch_object($result)) {
         $account = user_load(array('uid' => $account->uid));


  $rows[] = array(theme('username', $account),
            format_interval(time() - $account->created),
            $account->access ? t('%time ago', array('%time' => format_interval(time() - $account->access))) : t('never'),
            $account->profile_pending_reason,
            l(t(' edit'), "user/$account->uid/edit/G.+Administration", array()));
  }

  $output = theme('table', $header, $rows);
  $output .= theme('pager', NULL, 50, 0);
  print ($output);
}
